{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyNuUwn8e7xQWZHB5udffBc1",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "059dcd316e5d4cc8958b51b843a8fcd0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_d83a1865958e46eb83a84b37e789f5fe",
              "IPY_MODEL_f028c769646144fb80d7c71e306fb442",
              "IPY_MODEL_bc664ef022e64f8484a4d9ae2ac116fb"
            ],
            "layout": "IPY_MODEL_83014e40da9b4d46b58f86d6e56d8835"
          }
        },
        "d83a1865958e46eb83a84b37e789f5fe": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_fcba924675cb4b96b9b5811ce0b88787",
            "placeholder": "​",
            "style": "IPY_MODEL_14e2af29c7b04c2da600c2627a3debab",
            "value": "tokenizer_config.json: 100%"
          }
        },
        "f028c769646144fb80d7c71e306fb442": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d7c9a1c744d6447c829a2d81b817d1ca",
            "max": 34173,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_d62277d97bf5454f8f94e494461ffb75",
            "value": 34173
          }
        },
        "bc664ef022e64f8484a4d9ae2ac116fb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b8a4cca454dc44c596617bcf65492bf7",
            "placeholder": "​",
            "style": "IPY_MODEL_cd7a897b623140c5ace0708bfe4381cb",
            "value": " 34.2k/34.2k [00:00&lt;00:00, 1.44MB/s]"
          }
        },
        "83014e40da9b4d46b58f86d6e56d8835": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fcba924675cb4b96b9b5811ce0b88787": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "14e2af29c7b04c2da600c2627a3debab": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d7c9a1c744d6447c829a2d81b817d1ca": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d62277d97bf5454f8f94e494461ffb75": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "b8a4cca454dc44c596617bcf65492bf7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cd7a897b623140c5ace0708bfe4381cb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "ba08979247e74c4194654f0555da7373": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_762ddc2b171e401f8ef9aa625a61136e",
              "IPY_MODEL_660967f62ed64b5da1d7340b4ff40cfd",
              "IPY_MODEL_470dfe8886644961872f484fd69675b6"
            ],
            "layout": "IPY_MODEL_013ce53635264e10bbf9f5d835cefc66"
          }
        },
        "762ddc2b171e401f8ef9aa625a61136e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3c88ef10994f4008afd471ec9b92fd34",
            "placeholder": "​",
            "style": "IPY_MODEL_f5f2dd5f1cdc490b86c19c72815ad66a",
            "value": "tokenizer.model: 100%"
          }
        },
        "660967f62ed64b5da1d7340b4ff40cfd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b6bb2291b4434a1c83089059bccf74fc",
            "max": 4241003,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_b925cd77e0594856ab58a999f9fdb275",
            "value": 4241003
          }
        },
        "470dfe8886644961872f484fd69675b6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d92436c86b5f44d894356e6fc5cc4588",
            "placeholder": "​",
            "style": "IPY_MODEL_5d9c568731bf42c68c66e2ece95849ba",
            "value": " 4.24M/4.24M [00:00&lt;00:00, 19.9MB/s]"
          }
        },
        "013ce53635264e10bbf9f5d835cefc66": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3c88ef10994f4008afd471ec9b92fd34": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f5f2dd5f1cdc490b86c19c72815ad66a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "b6bb2291b4434a1c83089059bccf74fc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b925cd77e0594856ab58a999f9fdb275": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "d92436c86b5f44d894356e6fc5cc4588": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5d9c568731bf42c68c66e2ece95849ba": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "bdf7fa992a2c406180324c438d74f2d2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_1d1b0cee82b442a888d91dd22a6ec8da",
              "IPY_MODEL_5d5056e917774dab99ff538aba3c9731",
              "IPY_MODEL_b06ced25aa6e43029ee22741d4ff6677"
            ],
            "layout": "IPY_MODEL_f08706cf0ab94e90a613e37dbe5ef2fd"
          }
        },
        "1d1b0cee82b442a888d91dd22a6ec8da": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_04d6c40782de41d5aa694ca8ecca1bfb",
            "placeholder": "​",
            "style": "IPY_MODEL_4b9dc902ab4f4ff1bcc87cdaadc57733",
            "value": "tokenizer.json: 100%"
          }
        },
        "5d5056e917774dab99ff538aba3c9731": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6a06df4f40a24d7e80c4844d0ddd0523",
            "max": 17518497,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_1b341bed833540e184b0d3d06fca7a6f",
            "value": 17518497
          }
        },
        "b06ced25aa6e43029ee22741d4ff6677": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_cc1a547966ec49d2a25d8aaace8b03b0",
            "placeholder": "​",
            "style": "IPY_MODEL_bd4af0e922b34a0e8bb8525535f9bf4d",
            "value": " 17.5M/17.5M [00:00&lt;00:00, 74.7MB/s]"
          }
        },
        "f08706cf0ab94e90a613e37dbe5ef2fd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "04d6c40782de41d5aa694ca8ecca1bfb": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4b9dc902ab4f4ff1bcc87cdaadc57733": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6a06df4f40a24d7e80c4844d0ddd0523": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1b341bed833540e184b0d3d06fca7a6f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "cc1a547966ec49d2a25d8aaace8b03b0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "bd4af0e922b34a0e8bb8525535f9bf4d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "89c384881c974c5c8353b16b04c35249": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_37ee38ef237d452eb4e9400665125366",
              "IPY_MODEL_3d2a972e51344cea9c34cd50696f96d4",
              "IPY_MODEL_473000e8ef56471d866b814c90381e46"
            ],
            "layout": "IPY_MODEL_25f5979c1fd74bedbc3da826e3e483a4"
          }
        },
        "37ee38ef237d452eb4e9400665125366": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_774ee2928c4a49d3868a52958a2fad38",
            "placeholder": "​",
            "style": "IPY_MODEL_3f87a7226aaa4a7eb892e19a5883ddf9",
            "value": "special_tokens_map.json: 100%"
          }
        },
        "3d2a972e51344cea9c34cd50696f96d4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8e1b49e020bc4a9482760a2b8be9b246",
            "max": 636,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_f7bdddf36bf44c39b8e42c7a2368c1f8",
            "value": 636
          }
        },
        "473000e8ef56471d866b814c90381e46": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0565c2a784f54bcb99d8b16b8ed42b3f",
            "placeholder": "​",
            "style": "IPY_MODEL_1fdeb0592df44a4e8a1a7cf9fc3598ad",
            "value": " 636/636 [00:00&lt;00:00, 22.6kB/s]"
          }
        },
        "25f5979c1fd74bedbc3da826e3e483a4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "774ee2928c4a49d3868a52958a2fad38": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3f87a7226aaa4a7eb892e19a5883ddf9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8e1b49e020bc4a9482760a2b8be9b246": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f7bdddf36bf44c39b8e42c7a2368c1f8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "0565c2a784f54bcb99d8b16b8ed42b3f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1fdeb0592df44a4e8a1a7cf9fc3598ad": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "ae3bb452684e4b49870b36f9a3c819ab": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_252f5c79afd44d5fb60e9aa3fe8aba6f",
              "IPY_MODEL_75251b6ac5b645b2b7eb4f1c7395dd47",
              "IPY_MODEL_14aaff6a41ff41fe81902ca0f0932e28"
            ],
            "layout": "IPY_MODEL_50d05e395b4346b999f30999a069a1bc"
          }
        },
        "252f5c79afd44d5fb60e9aa3fe8aba6f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_656392d0463f42408c883274cfe2d3db",
            "placeholder": "​",
            "style": "IPY_MODEL_001991a12fc842159295d546da6b7d18",
            "value": "config.json: 100%"
          }
        },
        "75251b6ac5b645b2b7eb4f1c7395dd47": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d92a32503576448c80aa00d6207a5e63",
            "max": 627,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_c41ea04bf87341c1b72f493279a7ff92",
            "value": 627
          }
        },
        "14aaff6a41ff41fe81902ca0f0932e28": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c43f580c651f433c83f4708236e924db",
            "placeholder": "​",
            "style": "IPY_MODEL_b0f1f8bc947c4516912f8203412e059a",
            "value": " 627/627 [00:00&lt;00:00, 11.1kB/s]"
          }
        },
        "50d05e395b4346b999f30999a069a1bc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "656392d0463f42408c883274cfe2d3db": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "001991a12fc842159295d546da6b7d18": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d92a32503576448c80aa00d6207a5e63": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c41ea04bf87341c1b72f493279a7ff92": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "c43f580c651f433c83f4708236e924db": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b0f1f8bc947c4516912f8203412e059a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d9e952e65a324e0fa87176438a6f9283": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_0d1065cdb5174dcc8dc4f5739531962a",
              "IPY_MODEL_b4bebe8a8e2b4f3188357ac660545e3d",
              "IPY_MODEL_2abd893e5e714605bc2239dcc87eb85a"
            ],
            "layout": "IPY_MODEL_3a4ce7a239db4e9e9be50c79e6b7604b"
          }
        },
        "0d1065cdb5174dcc8dc4f5739531962a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b063ee542b8540b7bc83962fe6b4e368",
            "placeholder": "​",
            "style": "IPY_MODEL_83755f0c4f69498593fa93abf528ae25",
            "value": "model.safetensors.index.json: 100%"
          }
        },
        "b4bebe8a8e2b4f3188357ac660545e3d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9563b5652dcd4711a9dc4fe94d057896",
            "max": 13489,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_e03585819c064cb89a953dc1fe9715a6",
            "value": 13489
          }
        },
        "2abd893e5e714605bc2239dcc87eb85a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d743ea8d0fec4b49a890f48750baf903",
            "placeholder": "​",
            "style": "IPY_MODEL_d2e6c779bc9b4764a71828b986c22027",
            "value": " 13.5k/13.5k [00:00&lt;00:00, 289kB/s]"
          }
        },
        "3a4ce7a239db4e9e9be50c79e6b7604b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b063ee542b8540b7bc83962fe6b4e368": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "83755f0c4f69498593fa93abf528ae25": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "9563b5652dcd4711a9dc4fe94d057896": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e03585819c064cb89a953dc1fe9715a6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "d743ea8d0fec4b49a890f48750baf903": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d2e6c779bc9b4764a71828b986c22027": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "02e36ce63ebe4d7c8d89fcea1e171030": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_380281300b7548fd827e3b69afcb9a2a",
              "IPY_MODEL_f560c06bff504a0697468209235396dc",
              "IPY_MODEL_9a3f69ec70c4466f99a9675e248c1d06"
            ],
            "layout": "IPY_MODEL_a2ad0733ef494160aa5d839c216935ed"
          }
        },
        "380281300b7548fd827e3b69afcb9a2a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9328c1d887cf4b598d46cf34f7811226",
            "placeholder": "​",
            "style": "IPY_MODEL_36c5d07fdad74660836f7bda8de93dee",
            "value": "Downloading shards: 100%"
          }
        },
        "f560c06bff504a0697468209235396dc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_572184bfab2e4de8aeb06f9411ea0cea",
            "max": 2,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_6a3e3c56c7034d4e801e62e4112d9fe0",
            "value": 2
          }
        },
        "9a3f69ec70c4466f99a9675e248c1d06": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_fdd9a71c2da94edeb725efb990a55c42",
            "placeholder": "​",
            "style": "IPY_MODEL_05cf7d093fd84c6b98866f575a2c588d",
            "value": " 2/2 [00:40&lt;00:00, 16.74s/it]"
          }
        },
        "a2ad0733ef494160aa5d839c216935ed": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9328c1d887cf4b598d46cf34f7811226": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "36c5d07fdad74660836f7bda8de93dee": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "572184bfab2e4de8aeb06f9411ea0cea": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6a3e3c56c7034d4e801e62e4112d9fe0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "fdd9a71c2da94edeb725efb990a55c42": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "05cf7d093fd84c6b98866f575a2c588d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "da04cc17348e44d280f46190a1ca4d70": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_c5afd71461c74edbb7944ee2093816f8",
              "IPY_MODEL_73b7235cfe7a4126ab5b7840c149cb4b",
              "IPY_MODEL_fe24a8bf10d2462baac410e5d29d92c5"
            ],
            "layout": "IPY_MODEL_d5e6bd324b0a4945a83d05e55a912ed7"
          }
        },
        "c5afd71461c74edbb7944ee2093816f8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_fbd42adb3e1f44fa94b84bdd865fec9d",
            "placeholder": "​",
            "style": "IPY_MODEL_d798f4804b494d26a7b6f624c52f7886",
            "value": "model-00001-of-00002.safetensors: 100%"
          }
        },
        "73b7235cfe7a4126ab5b7840c149cb4b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e0bdfb2ed6754655a8b54781d6d65c4a",
            "max": 4945242264,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_e4b439969a5a4c11bcff4db0d4fb9aa2",
            "value": 4945242264
          }
        },
        "fe24a8bf10d2462baac410e5d29d92c5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_bcfe53eeaaa94120bdfab112d1f841a9",
            "placeholder": "​",
            "style": "IPY_MODEL_d41ef36378fb40acbefc4c487e214a2b",
            "value": " 4.95G/4.95G [00:39&lt;00:00, 182MB/s]"
          }
        },
        "d5e6bd324b0a4945a83d05e55a912ed7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fbd42adb3e1f44fa94b84bdd865fec9d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d798f4804b494d26a7b6f624c52f7886": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "e0bdfb2ed6754655a8b54781d6d65c4a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e4b439969a5a4c11bcff4db0d4fb9aa2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "bcfe53eeaaa94120bdfab112d1f841a9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d41ef36378fb40acbefc4c487e214a2b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c8f98a74b8bc4744a6543c21a72fb29d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_5e0bf1c67e8e4b4c8105f3cfba02611a",
              "IPY_MODEL_8a3084acf70147749e68d05ed8f168df",
              "IPY_MODEL_2d69fd52010f4a7ab625efebc167ba09"
            ],
            "layout": "IPY_MODEL_a481cb9d5b8d40bcb195ff6b75c72301"
          }
        },
        "5e0bf1c67e8e4b4c8105f3cfba02611a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_bb617238eecf48669cf83f0808540f9a",
            "placeholder": "​",
            "style": "IPY_MODEL_4ca915e7ab4c457b8b9edbbd07cf314b",
            "value": "model-00002-of-00002.safetensors: 100%"
          }
        },
        "8a3084acf70147749e68d05ed8f168df": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5079093bae60420e9212fcc0a5796223",
            "max": 67121608,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_36be33280b87485bae585360beeb926b",
            "value": 67121608
          }
        },
        "2d69fd52010f4a7ab625efebc167ba09": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7d1f991fc9cd45a38dedddec27c7c260",
            "placeholder": "​",
            "style": "IPY_MODEL_82052945132c4575b985022a13f4d0e3",
            "value": " 67.1M/67.1M [00:00&lt;00:00, 211MB/s]"
          }
        },
        "a481cb9d5b8d40bcb195ff6b75c72301": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "bb617238eecf48669cf83f0808540f9a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4ca915e7ab4c457b8b9edbbd07cf314b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "5079093bae60420e9212fcc0a5796223": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "36be33280b87485bae585360beeb926b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "7d1f991fc9cd45a38dedddec27c7c260": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "82052945132c4575b985022a13f4d0e3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "7fb37bc10ad54fd5ae7fd825bb4e40b1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_6bc7b805a8354c7791d0ac1201b0f629",
              "IPY_MODEL_5e139ae1998b40909576ce10ed788f51",
              "IPY_MODEL_bf3f193c5e034695a13a7f6a3e8cc5ec"
            ],
            "layout": "IPY_MODEL_0766d4b81dbc4df98f1575bd4539212c"
          }
        },
        "6bc7b805a8354c7791d0ac1201b0f629": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1c7a0ac02a524a3993cea9852fbb91af",
            "placeholder": "​",
            "style": "IPY_MODEL_ca832fac31cf4a228f28af0009d80d67",
            "value": "Loading checkpoint shards: 100%"
          }
        },
        "5e139ae1998b40909576ce10ed788f51": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3070276bb8294d018cabfdd22d44a087",
            "max": 2,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_c31d53e774734c5197a4d7d2ff84ea5b",
            "value": 2
          }
        },
        "bf3f193c5e034695a13a7f6a3e8cc5ec": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0698077e64d2476890f6400b4ebb1b8e",
            "placeholder": "​",
            "style": "IPY_MODEL_55c10340a2af4d9aa167bec3b0a47a9f",
            "value": " 2/2 [00:19&lt;00:00,  8.27s/it]"
          }
        },
        "0766d4b81dbc4df98f1575bd4539212c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1c7a0ac02a524a3993cea9852fbb91af": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ca832fac31cf4a228f28af0009d80d67": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "3070276bb8294d018cabfdd22d44a087": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c31d53e774734c5197a4d7d2ff84ea5b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "0698077e64d2476890f6400b4ebb1b8e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "55c10340a2af4d9aa167bec3b0a47a9f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "95376ed1b539409d8c0e73ba4a785ac8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_73d7fe9b72424b60975f4457fd46c6ca",
              "IPY_MODEL_6288aa50b87a4dd7a96d08dbae4812b5",
              "IPY_MODEL_4f21891e08494cdd9e11d06399cc2293"
            ],
            "layout": "IPY_MODEL_16802086a67242e18ecf5707025d26a3"
          }
        },
        "73d7fe9b72424b60975f4457fd46c6ca": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_905923ddbf00498cb23dd33079294e8e",
            "placeholder": "​",
            "style": "IPY_MODEL_573ba084540142af8311f49afb16aeea",
            "value": "generation_config.json: 100%"
          }
        },
        "6288aa50b87a4dd7a96d08dbae4812b5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_fc062b9d6a354709a71e32833e5b282c",
            "max": 137,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_738bb6d285a44489992c7b5c73c1a86c",
            "value": 137
          }
        },
        "4f21891e08494cdd9e11d06399cc2293": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8102cd5977734bb8af4eb598e239288e",
            "placeholder": "​",
            "style": "IPY_MODEL_fe67ccbe284c42ea86d22b6bfe27e1d0",
            "value": " 137/137 [00:00&lt;00:00, 10.4kB/s]"
          }
        },
        "16802086a67242e18ecf5707025d26a3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "905923ddbf00498cb23dd33079294e8e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "573ba084540142af8311f49afb16aeea": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "fc062b9d6a354709a71e32833e5b282c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "738bb6d285a44489992c7b5c73c1a86c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "8102cd5977734bb8af4eb598e239288e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fe67ccbe284c42ea86d22b6bfe27e1d0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SushekTamrakar/ai-job-description/blob/main/Ragipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install PyMuPDF==1.23.26\n",
        "!pip install matplotlib==3.8.3\n",
        "!pip install numpy==1.26.4\n",
        "!pip install pandas==2.2.1\n",
        "!pip install Requests==2.31.0\n",
        "!pip install sentence_transformers==2.5.1\n",
        "!pip install spacy\n",
        "!pip install tqdm==4.66.2\n",
        "!pip install transformers==4.38.2\n",
        "!pip install accelerate\n",
        "!pip install bitsandbytes\n",
        "!pip install wheel\n",
        "!pip install -U \"huggingface_hub[cli]\""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "54RwTGL2bVZZ",
        "outputId": "60262618-e002-4f8e-c185-195be0e8d805"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting PyMuPDF==1.23.26\n",
            "  Downloading PyMuPDF-1.23.26-cp310-none-manylinux2014_x86_64.whl.metadata (3.4 kB)\n",
            "Collecting PyMuPDFb==1.23.22 (from PyMuPDF==1.23.26)\n",
            "  Downloading PyMuPDFb-1.23.22-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (1.4 kB)\n",
            "Downloading PyMuPDF-1.23.26-cp310-none-manylinux2014_x86_64.whl (4.4 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.4/4.4 MB\u001b[0m \u001b[31m37.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading PyMuPDFb-1.23.22-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (30.6 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m30.6/30.6 MB\u001b[0m \u001b[31m52.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: PyMuPDFb, PyMuPDF\n",
            "Successfully installed PyMuPDF-1.23.26 PyMuPDFb-1.23.22\n",
            "Collecting matplotlib==3.8.3\n",
            "  Downloading matplotlib-3.8.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.8 kB)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib==3.8.3) (1.2.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib==3.8.3) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib==3.8.3) (4.53.1)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib==3.8.3) (1.4.5)\n",
            "Requirement already satisfied: numpy<2,>=1.21 in /usr/local/lib/python3.10/dist-packages (from matplotlib==3.8.3) (1.25.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib==3.8.3) (24.1)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.10/dist-packages (from matplotlib==3.8.3) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib==3.8.3) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib==3.8.3) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib==3.8.3) (1.16.0)\n",
            "Downloading matplotlib-3.8.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (11.6 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m11.6/11.6 MB\u001b[0m \u001b[31m91.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: matplotlib\n",
            "  Attempting uninstall: matplotlib\n",
            "    Found existing installation: matplotlib 3.7.1\n",
            "    Uninstalling matplotlib-3.7.1:\n",
            "      Successfully uninstalled matplotlib-3.7.1\n",
            "Successfully installed matplotlib-3.8.3\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "matplotlib",
                  "mpl_toolkits"
                ]
              },
              "id": "26fdeaef0e95492da3a92654bb1a6be2"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting numpy==1.26.4\n",
            "  Downloading numpy-1.26.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (61 kB)\n",
            "\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/61.0 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m61.0/61.0 kB\u001b[0m \u001b[31m3.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading numpy-1.26.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (18.2 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m18.2/18.2 MB\u001b[0m \u001b[31m86.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: numpy\n",
            "  Attempting uninstall: numpy\n",
            "    Found existing installation: numpy 1.25.2\n",
            "    Uninstalling numpy-1.25.2:\n",
            "      Successfully uninstalled numpy-1.25.2\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "xgboost 2.1.0 requires nvidia-nccl-cu12; platform_system == \"Linux\" and platform_machine != \"aarch64\", which is not installed.\u001b[0m\u001b[31m\n",
            "\u001b[0mSuccessfully installed numpy-1.26.4\n",
            "Collecting pandas==2.2.1\n",
            "  Downloading pandas-2.2.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (19 kB)\n",
            "Requirement already satisfied: numpy<2,>=1.22.4 in /usr/local/lib/python3.10/dist-packages (from pandas==2.2.1) (1.26.4)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas==2.2.1) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas==2.2.1) (2024.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas==2.2.1) (2024.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas==2.2.1) (1.16.0)\n",
            "Downloading pandas-2.2.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.0 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.0/13.0 MB\u001b[0m \u001b[31m65.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: pandas\n",
            "  Attempting uninstall: pandas\n",
            "    Found existing installation: pandas 2.0.3\n",
            "    Uninstalling pandas-2.0.3:\n",
            "      Successfully uninstalled pandas-2.0.3\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "google-colab 1.0.0 requires pandas==2.0.3, but you have pandas 2.2.1 which is incompatible.\u001b[0m\u001b[31m\n",
            "\u001b[0mSuccessfully installed pandas-2.2.1\n",
            "Requirement already satisfied: Requests==2.31.0 in /usr/local/lib/python3.10/dist-packages (2.31.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from Requests==2.31.0) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from Requests==2.31.0) (3.7)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from Requests==2.31.0) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from Requests==2.31.0) (2024.7.4)\n",
            "Collecting sentence_transformers==2.5.1\n",
            "  Downloading sentence_transformers-2.5.1-py3-none-any.whl.metadata (11 kB)\n",
            "Requirement already satisfied: transformers<5.0.0,>=4.32.0 in /usr/local/lib/python3.10/dist-packages (from sentence_transformers==2.5.1) (4.42.4)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from sentence_transformers==2.5.1) (4.66.4)\n",
            "Requirement already satisfied: torch>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from sentence_transformers==2.5.1) (2.3.1+cu121)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from sentence_transformers==2.5.1) (1.26.4)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from sentence_transformers==2.5.1) (1.3.2)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from sentence_transformers==2.5.1) (1.13.1)\n",
            "Requirement already satisfied: huggingface-hub>=0.15.1 in /usr/local/lib/python3.10/dist-packages (from sentence_transformers==2.5.1) (0.23.5)\n",
            "Requirement already satisfied: Pillow in /usr/local/lib/python3.10/dist-packages (from sentence_transformers==2.5.1) (9.4.0)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.15.1->sentence_transformers==2.5.1) (3.15.4)\n",
            "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.15.1->sentence_transformers==2.5.1) (2024.6.1)\n",
            "Requirement already satisfied: packaging>=20.9 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.15.1->sentence_transformers==2.5.1) (24.1)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.15.1->sentence_transformers==2.5.1) (6.0.1)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.15.1->sentence_transformers==2.5.1) (2.31.0)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.15.1->sentence_transformers==2.5.1) (4.12.2)\n",
            "Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch>=1.11.0->sentence_transformers==2.5.1) (1.13.1)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch>=1.11.0->sentence_transformers==2.5.1) (3.3)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch>=1.11.0->sentence_transformers==2.5.1) (3.1.4)\n",
            "Collecting nvidia-cuda-nvrtc-cu12==12.1.105 (from torch>=1.11.0->sentence_transformers==2.5.1)\n",
            "  Using cached nvidia_cuda_nvrtc_cu12-12.1.105-py3-none-manylinux1_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cuda-runtime-cu12==12.1.105 (from torch>=1.11.0->sentence_transformers==2.5.1)\n",
            "  Using cached nvidia_cuda_runtime_cu12-12.1.105-py3-none-manylinux1_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cuda-cupti-cu12==12.1.105 (from torch>=1.11.0->sentence_transformers==2.5.1)\n",
            "  Using cached nvidia_cuda_cupti_cu12-12.1.105-py3-none-manylinux1_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-cudnn-cu12==8.9.2.26 (from torch>=1.11.0->sentence_transformers==2.5.1)\n",
            "  Using cached nvidia_cudnn_cu12-8.9.2.26-py3-none-manylinux1_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-cublas-cu12==12.1.3.1 (from torch>=1.11.0->sentence_transformers==2.5.1)\n",
            "  Using cached nvidia_cublas_cu12-12.1.3.1-py3-none-manylinux1_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cufft-cu12==11.0.2.54 (from torch>=1.11.0->sentence_transformers==2.5.1)\n",
            "  Using cached nvidia_cufft_cu12-11.0.2.54-py3-none-manylinux1_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-curand-cu12==10.3.2.106 (from torch>=1.11.0->sentence_transformers==2.5.1)\n",
            "  Using cached nvidia_curand_cu12-10.3.2.106-py3-none-manylinux1_x86_64.whl.metadata (1.5 kB)\n",
            "Collecting nvidia-cusolver-cu12==11.4.5.107 (from torch>=1.11.0->sentence_transformers==2.5.1)\n",
            "  Using cached nvidia_cusolver_cu12-11.4.5.107-py3-none-manylinux1_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-cusparse-cu12==12.1.0.106 (from torch>=1.11.0->sentence_transformers==2.5.1)\n",
            "  Using cached nvidia_cusparse_cu12-12.1.0.106-py3-none-manylinux1_x86_64.whl.metadata (1.6 kB)\n",
            "Collecting nvidia-nccl-cu12==2.20.5 (from torch>=1.11.0->sentence_transformers==2.5.1)\n",
            "  Using cached nvidia_nccl_cu12-2.20.5-py3-none-manylinux2014_x86_64.whl.metadata (1.8 kB)\n",
            "Collecting nvidia-nvtx-cu12==12.1.105 (from torch>=1.11.0->sentence_transformers==2.5.1)\n",
            "  Using cached nvidia_nvtx_cu12-12.1.105-py3-none-manylinux1_x86_64.whl.metadata (1.7 kB)\n",
            "Requirement already satisfied: triton==2.3.1 in /usr/local/lib/python3.10/dist-packages (from torch>=1.11.0->sentence_transformers==2.5.1) (2.3.1)\n",
            "Collecting nvidia-nvjitlink-cu12 (from nvidia-cusolver-cu12==11.4.5.107->torch>=1.11.0->sentence_transformers==2.5.1)\n",
            "  Downloading nvidia_nvjitlink_cu12-12.5.82-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers<5.0.0,>=4.32.0->sentence_transformers==2.5.1) (2024.5.15)\n",
            "Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers<5.0.0,>=4.32.0->sentence_transformers==2.5.1) (0.4.3)\n",
            "Requirement already satisfied: tokenizers<0.20,>=0.19 in /usr/local/lib/python3.10/dist-packages (from transformers<5.0.0,>=4.32.0->sentence_transformers==2.5.1) (0.19.1)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->sentence_transformers==2.5.1) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->sentence_transformers==2.5.1) (3.5.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch>=1.11.0->sentence_transformers==2.5.1) (2.1.5)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.15.1->sentence_transformers==2.5.1) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.15.1->sentence_transformers==2.5.1) (3.7)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.15.1->sentence_transformers==2.5.1) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.15.1->sentence_transformers==2.5.1) (2024.7.4)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy->torch>=1.11.0->sentence_transformers==2.5.1) (1.3.0)\n",
            "Downloading sentence_transformers-2.5.1-py3-none-any.whl (156 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m156.5/156.5 kB\u001b[0m \u001b[31m6.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hUsing cached nvidia_cublas_cu12-12.1.3.1-py3-none-manylinux1_x86_64.whl (410.6 MB)\n",
            "Using cached nvidia_cuda_cupti_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (14.1 MB)\n",
            "Using cached nvidia_cuda_nvrtc_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (23.7 MB)\n",
            "Using cached nvidia_cuda_runtime_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (823 kB)\n",
            "Using cached nvidia_cudnn_cu12-8.9.2.26-py3-none-manylinux1_x86_64.whl (731.7 MB)\n",
            "Using cached nvidia_cufft_cu12-11.0.2.54-py3-none-manylinux1_x86_64.whl (121.6 MB)\n",
            "Using cached nvidia_curand_cu12-10.3.2.106-py3-none-manylinux1_x86_64.whl (56.5 MB)\n",
            "Using cached nvidia_cusolver_cu12-11.4.5.107-py3-none-manylinux1_x86_64.whl (124.2 MB)\n",
            "Using cached nvidia_cusparse_cu12-12.1.0.106-py3-none-manylinux1_x86_64.whl (196.0 MB)\n",
            "Using cached nvidia_nccl_cu12-2.20.5-py3-none-manylinux2014_x86_64.whl (176.2 MB)\n",
            "Using cached nvidia_nvtx_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (99 kB)\n",
            "Downloading nvidia_nvjitlink_cu12-12.5.82-py3-none-manylinux2014_x86_64.whl (21.3 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.3/21.3 MB\u001b[0m \u001b[31m13.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: nvidia-nvtx-cu12, nvidia-nvjitlink-cu12, nvidia-nccl-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, nvidia-cusparse-cu12, nvidia-cudnn-cu12, nvidia-cusolver-cu12, sentence_transformers\n",
            "Successfully installed nvidia-cublas-cu12-12.1.3.1 nvidia-cuda-cupti-cu12-12.1.105 nvidia-cuda-nvrtc-cu12-12.1.105 nvidia-cuda-runtime-cu12-12.1.105 nvidia-cudnn-cu12-8.9.2.26 nvidia-cufft-cu12-11.0.2.54 nvidia-curand-cu12-10.3.2.106 nvidia-cusolver-cu12-11.4.5.107 nvidia-cusparse-cu12-12.1.0.106 nvidia-nccl-cu12-2.20.5 nvidia-nvjitlink-cu12-12.5.82 nvidia-nvtx-cu12-12.1.105 sentence_transformers-2.5.1\n",
            "Requirement already satisfied: spacy in /usr/local/lib/python3.10/dist-packages (3.7.5)\n",
            "Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.11 in /usr/local/lib/python3.10/dist-packages (from spacy) (3.0.12)\n",
            "Requirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (1.0.5)\n",
            "Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (1.0.10)\n",
            "Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.0.8)\n",
            "Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.10/dist-packages (from spacy) (3.0.9)\n",
            "Requirement already satisfied: thinc<8.3.0,>=8.2.2 in /usr/local/lib/python3.10/dist-packages (from spacy) (8.2.5)\n",
            "Requirement already satisfied: wasabi<1.2.0,>=0.9.1 in /usr/local/lib/python3.10/dist-packages (from spacy) (1.1.3)\n",
            "Requirement already satisfied: srsly<3.0.0,>=2.4.3 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.4.8)\n",
            "Requirement already satisfied: catalogue<2.1.0,>=2.0.6 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.0.10)\n",
            "Requirement already satisfied: weasel<0.5.0,>=0.1.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (0.4.1)\n",
            "Requirement already satisfied: typer<1.0.0,>=0.3.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (0.12.3)\n",
            "Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (4.66.4)\n",
            "Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.31.0)\n",
            "Requirement already satisfied: pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.8.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from spacy) (3.1.4)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from spacy) (71.0.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (24.1)\n",
            "Requirement already satisfied: langcodes<4.0.0,>=3.2.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (3.4.0)\n",
            "Requirement already satisfied: numpy>=1.19.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (1.26.4)\n",
            "Requirement already satisfied: language-data>=1.2 in /usr/local/lib/python3.10/dist-packages (from langcodes<4.0.0,>=3.2.0->spacy) (1.2.0)\n",
            "Requirement already satisfied: annotated-types>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.20.1 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy) (2.20.1)\n",
            "Requirement already satisfied: typing-extensions>=4.6.1 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy) (4.12.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (3.7)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (2024.7.4)\n",
            "Requirement already satisfied: blis<0.8.0,>=0.7.8 in /usr/local/lib/python3.10/dist-packages (from thinc<8.3.0,>=8.2.2->spacy) (0.7.11)\n",
            "Requirement already satisfied: confection<1.0.0,>=0.0.1 in /usr/local/lib/python3.10/dist-packages (from thinc<8.3.0,>=8.2.2->spacy) (0.1.5)\n",
            "Requirement already satisfied: click>=8.0.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0.0,>=0.3.0->spacy) (8.1.7)\n",
            "Requirement already satisfied: shellingham>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0.0,>=0.3.0->spacy) (1.5.4)\n",
            "Requirement already satisfied: rich>=10.11.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0.0,>=0.3.0->spacy) (13.7.1)\n",
            "Requirement already satisfied: cloudpathlib<1.0.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from weasel<0.5.0,>=0.1.0->spacy) (0.18.1)\n",
            "Requirement already satisfied: smart-open<8.0.0,>=5.2.1 in /usr/local/lib/python3.10/dist-packages (from weasel<0.5.0,>=0.1.0->spacy) (7.0.4)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->spacy) (2.1.5)\n",
            "Requirement already satisfied: marisa-trie>=0.7.7 in /usr/local/lib/python3.10/dist-packages (from language-data>=1.2->langcodes<4.0.0,>=3.2.0->spacy) (1.2.0)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich>=10.11.0->typer<1.0.0,>=0.3.0->spacy) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich>=10.11.0->typer<1.0.0,>=0.3.0->spacy) (2.16.1)\n",
            "Requirement already satisfied: wrapt in /usr/local/lib/python3.10/dist-packages (from smart-open<8.0.0,>=5.2.1->weasel<0.5.0,>=0.1.0->spacy) (1.14.1)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich>=10.11.0->typer<1.0.0,>=0.3.0->spacy) (0.1.2)\n",
            "Collecting tqdm==4.66.2\n",
            "  Downloading tqdm-4.66.2-py3-none-any.whl.metadata (57 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m57.6/57.6 kB\u001b[0m \u001b[31m3.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading tqdm-4.66.2-py3-none-any.whl (78 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m78.3/78.3 kB\u001b[0m \u001b[31m4.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: tqdm\n",
            "  Attempting uninstall: tqdm\n",
            "    Found existing installation: tqdm 4.66.4\n",
            "    Uninstalling tqdm-4.66.4:\n",
            "      Successfully uninstalled tqdm-4.66.4\n",
            "Successfully installed tqdm-4.66.2\n",
            "Collecting transformers==4.38.2\n",
            "  Downloading transformers-4.38.2-py3-none-any.whl.metadata (130 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m130.7/130.7 kB\u001b[0m \u001b[31m4.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers==4.38.2) (3.15.4)\n",
            "Requirement already satisfied: huggingface-hub<1.0,>=0.19.3 in /usr/local/lib/python3.10/dist-packages (from transformers==4.38.2) (0.23.5)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers==4.38.2) (1.26.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers==4.38.2) (24.1)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers==4.38.2) (6.0.1)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers==4.38.2) (2024.5.15)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers==4.38.2) (2.31.0)\n",
            "Collecting tokenizers<0.19,>=0.14 (from transformers==4.38.2)\n",
            "  Downloading tokenizers-0.15.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.7 kB)\n",
            "Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers==4.38.2) (0.4.3)\n",
            "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers==4.38.2) (4.66.2)\n",
            "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.19.3->transformers==4.38.2) (2024.6.1)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.19.3->transformers==4.38.2) (4.12.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->transformers==4.38.2) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->transformers==4.38.2) (3.7)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->transformers==4.38.2) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->transformers==4.38.2) (2024.7.4)\n",
            "Downloading transformers-4.38.2-py3-none-any.whl (8.5 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.5/8.5 MB\u001b[0m \u001b[31m81.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading tokenizers-0.15.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.6/3.6 MB\u001b[0m \u001b[31m88.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: tokenizers, transformers\n",
            "  Attempting uninstall: tokenizers\n",
            "    Found existing installation: tokenizers 0.19.1\n",
            "    Uninstalling tokenizers-0.19.1:\n",
            "      Successfully uninstalled tokenizers-0.19.1\n",
            "  Attempting uninstall: transformers\n",
            "    Found existing installation: transformers 4.42.4\n",
            "    Uninstalling transformers-4.42.4:\n",
            "      Successfully uninstalled transformers-4.42.4\n",
            "Successfully installed tokenizers-0.15.2 transformers-4.38.2\n",
            "Requirement already satisfied: accelerate in /usr/local/lib/python3.10/dist-packages (0.32.1)\n",
            "Requirement already satisfied: numpy<2.0.0,>=1.17 in /usr/local/lib/python3.10/dist-packages (from accelerate) (1.26.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from accelerate) (24.1)\n",
            "Requirement already satisfied: psutil in /usr/local/lib/python3.10/dist-packages (from accelerate) (5.9.5)\n",
            "Requirement already satisfied: pyyaml in /usr/local/lib/python3.10/dist-packages (from accelerate) (6.0.1)\n",
            "Requirement already satisfied: torch>=1.10.0 in /usr/local/lib/python3.10/dist-packages (from accelerate) (2.3.1+cu121)\n",
            "Requirement already satisfied: huggingface-hub in /usr/local/lib/python3.10/dist-packages (from accelerate) (0.23.5)\n",
            "Requirement already satisfied: safetensors>=0.3.1 in /usr/local/lib/python3.10/dist-packages (from accelerate) (0.4.3)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (3.15.4)\n",
            "Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (4.12.2)\n",
            "Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (1.13.1)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (3.3)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (3.1.4)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (2024.6.1)\n",
            "Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (12.1.105)\n",
            "Requirement already satisfied: nvidia-cuda-runtime-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (12.1.105)\n",
            "Requirement already satisfied: nvidia-cuda-cupti-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (12.1.105)\n",
            "Requirement already satisfied: nvidia-cudnn-cu12==8.9.2.26 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (8.9.2.26)\n",
            "Requirement already satisfied: nvidia-cublas-cu12==12.1.3.1 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (12.1.3.1)\n",
            "Requirement already satisfied: nvidia-cufft-cu12==11.0.2.54 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (11.0.2.54)\n",
            "Requirement already satisfied: nvidia-curand-cu12==10.3.2.106 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (10.3.2.106)\n",
            "Requirement already satisfied: nvidia-cusolver-cu12==11.4.5.107 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (11.4.5.107)\n",
            "Requirement already satisfied: nvidia-cusparse-cu12==12.1.0.106 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (12.1.0.106)\n",
            "Requirement already satisfied: nvidia-nccl-cu12==2.20.5 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (2.20.5)\n",
            "Requirement already satisfied: nvidia-nvtx-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (12.1.105)\n",
            "Requirement already satisfied: triton==2.3.1 in /usr/local/lib/python3.10/dist-packages (from torch>=1.10.0->accelerate) (2.3.1)\n",
            "Requirement already satisfied: nvidia-nvjitlink-cu12 in /usr/local/lib/python3.10/dist-packages (from nvidia-cusolver-cu12==11.4.5.107->torch>=1.10.0->accelerate) (12.5.82)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from huggingface-hub->accelerate) (2.31.0)\n",
            "Requirement already satisfied: tqdm>=4.42.1 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub->accelerate) (4.66.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch>=1.10.0->accelerate) (2.1.5)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub->accelerate) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub->accelerate) (3.7)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub->accelerate) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub->accelerate) (2024.7.4)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy->torch>=1.10.0->accelerate) (1.3.0)\n",
            "Collecting bitsandbytes\n",
            "  Downloading bitsandbytes-0.43.2-py3-none-manylinux_2_24_x86_64.whl.metadata (3.5 kB)\n",
            "Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (from bitsandbytes) (2.3.1+cu121)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from bitsandbytes) (1.26.4)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch->bitsandbytes) (3.15.4)\n",
            "Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch->bitsandbytes) (4.12.2)\n",
            "Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch->bitsandbytes) (1.13.1)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch->bitsandbytes) (3.3)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch->bitsandbytes) (3.1.4)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch->bitsandbytes) (2024.6.1)\n",
            "Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch->bitsandbytes) (12.1.105)\n",
            "Requirement already satisfied: nvidia-cuda-runtime-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch->bitsandbytes) (12.1.105)\n",
            "Requirement already satisfied: nvidia-cuda-cupti-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch->bitsandbytes) (12.1.105)\n",
            "Requirement already satisfied: nvidia-cudnn-cu12==8.9.2.26 in /usr/local/lib/python3.10/dist-packages (from torch->bitsandbytes) (8.9.2.26)\n",
            "Requirement already satisfied: nvidia-cublas-cu12==12.1.3.1 in /usr/local/lib/python3.10/dist-packages (from torch->bitsandbytes) (12.1.3.1)\n",
            "Requirement already satisfied: nvidia-cufft-cu12==11.0.2.54 in /usr/local/lib/python3.10/dist-packages (from torch->bitsandbytes) (11.0.2.54)\n",
            "Requirement already satisfied: nvidia-curand-cu12==10.3.2.106 in /usr/local/lib/python3.10/dist-packages (from torch->bitsandbytes) (10.3.2.106)\n",
            "Requirement already satisfied: nvidia-cusolver-cu12==11.4.5.107 in /usr/local/lib/python3.10/dist-packages (from torch->bitsandbytes) (11.4.5.107)\n",
            "Requirement already satisfied: nvidia-cusparse-cu12==12.1.0.106 in /usr/local/lib/python3.10/dist-packages (from torch->bitsandbytes) (12.1.0.106)\n",
            "Requirement already satisfied: nvidia-nccl-cu12==2.20.5 in /usr/local/lib/python3.10/dist-packages (from torch->bitsandbytes) (2.20.5)\n",
            "Requirement already satisfied: nvidia-nvtx-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch->bitsandbytes) (12.1.105)\n",
            "Requirement already satisfied: triton==2.3.1 in /usr/local/lib/python3.10/dist-packages (from torch->bitsandbytes) (2.3.1)\n",
            "Requirement already satisfied: nvidia-nvjitlink-cu12 in /usr/local/lib/python3.10/dist-packages (from nvidia-cusolver-cu12==11.4.5.107->torch->bitsandbytes) (12.5.82)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch->bitsandbytes) (2.1.5)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy->torch->bitsandbytes) (1.3.0)\n",
            "Downloading bitsandbytes-0.43.2-py3-none-manylinux_2_24_x86_64.whl (137.5 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m137.5/137.5 MB\u001b[0m \u001b[31m7.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: bitsandbytes\n",
            "Successfully installed bitsandbytes-0.43.2\n",
            "Requirement already satisfied: wheel in /usr/local/lib/python3.10/dist-packages (0.43.0)\n",
            "Requirement already satisfied: huggingface_hub[cli] in /usr/local/lib/python3.10/dist-packages (0.23.5)\n",
            "Collecting huggingface_hub[cli]\n",
            "  Downloading huggingface_hub-0.24.3-py3-none-any.whl.metadata (13 kB)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from huggingface_hub[cli]) (3.15.4)\n",
            "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub[cli]) (2024.6.1)\n",
            "Requirement already satisfied: packaging>=20.9 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub[cli]) (24.1)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub[cli]) (6.0.1)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from huggingface_hub[cli]) (2.31.0)\n",
            "Requirement already satisfied: tqdm>=4.42.1 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub[cli]) (4.66.2)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface_hub[cli]) (4.12.2)\n",
            "Collecting InquirerPy==0.3.4 (from huggingface_hub[cli])\n",
            "  Downloading InquirerPy-0.3.4-py3-none-any.whl.metadata (8.1 kB)\n",
            "Collecting pfzy<0.4.0,>=0.3.1 (from InquirerPy==0.3.4->huggingface_hub[cli])\n",
            "  Downloading pfzy-0.3.4-py3-none-any.whl.metadata (4.9 kB)\n",
            "Requirement already satisfied: prompt-toolkit<4.0.0,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from InquirerPy==0.3.4->huggingface_hub[cli]) (3.0.47)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface_hub[cli]) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface_hub[cli]) (3.7)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface_hub[cli]) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface_hub[cli]) (2024.7.4)\n",
            "Requirement already satisfied: wcwidth in /usr/local/lib/python3.10/dist-packages (from prompt-toolkit<4.0.0,>=3.0.1->InquirerPy==0.3.4->huggingface_hub[cli]) (0.2.13)\n",
            "Downloading InquirerPy-0.3.4-py3-none-any.whl (67 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m67.7/67.7 kB\u001b[0m \u001b[31m3.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading huggingface_hub-0.24.3-py3-none-any.whl (417 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m417.3/417.3 kB\u001b[0m \u001b[31m16.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading pfzy-0.3.4-py3-none-any.whl (8.5 kB)\n",
            "Installing collected packages: pfzy, InquirerPy, huggingface_hub\n",
            "  Attempting uninstall: huggingface_hub\n",
            "    Found existing installation: huggingface-hub 0.23.5\n",
            "    Uninstalling huggingface-hub-0.23.5:\n",
            "      Successfully uninstalled huggingface-hub-0.23.5\n",
            "Successfully installed InquirerPy-0.3.4 huggingface_hub-0.24.3 pfzy-0.3.4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 373
        },
        "id": "RJTwU3CNVD4n",
        "outputId": "87422734-419e-452c-9d0c-588eb3c7560c"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "RuntimeError",
          "evalue": "Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-4-f6e321ef8c2f>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mgpu_memory_bytes\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcuda\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_device_properties\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtotal_memory\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mgpu_memory_gb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mround\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgpu_memory_bytes\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m30\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Available GPU Memory: {gpu_memory_gb} GB\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/cuda/__init__.py\u001b[0m in \u001b[0;36mget_device_properties\u001b[0;34m(device)\u001b[0m\n\u001b[1;32m    442\u001b[0m         \u001b[0m_CudaDeviceProperties\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mproperties\u001b[0m \u001b[0mof\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mdevice\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    443\u001b[0m     \"\"\"\n\u001b[0;32m--> 444\u001b[0;31m     \u001b[0m_lazy_init\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# will define _get_device_properties\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    445\u001b[0m     \u001b[0mdevice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_get_device_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptional\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    446\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mdevice\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mdevice\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0mdevice_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/cuda/__init__.py\u001b[0m in \u001b[0;36m_lazy_init\u001b[0;34m()\u001b[0m\n\u001b[1;32m    291\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m\"CUDA_MODULE_LOADING\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menviron\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    292\u001b[0m             \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0menviron\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"CUDA_MODULE_LOADING\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"LAZY\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 293\u001b[0;31m         \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_C\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_cuda_init\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    294\u001b[0m         \u001b[0;31m# Some of the queued calls may reentrantly call _lazy_init();\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    295\u001b[0m         \u001b[0;31m# we need to just return without initializing in that case.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mRuntimeError\u001b[0m: Found no NVIDIA driver on your system. Please check that you have an NVIDIA GPU and installed a driver from http://www.nvidia.com/Download/index.aspx"
          ]
        }
      ],
      "source": [
        "# Get GPU available memory\n",
        "\n",
        "import torch\n",
        "\n",
        "gpu_memory_bytes= torch.cuda.get_device_properties(0).total_memory\n",
        "gpu_memory_gb = round(gpu_memory_bytes / (2**30))\n",
        "print(f\"Available GPU Memory: {gpu_memory_gb} GB\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Note: THe following is Gemma focused, however, there are more and more LLMs of the 2B and 7B size appearing for local use\n",
        "\n",
        "if gpu_memory_gb < 5.1:\n",
        "    print(f\"Your available GPU memory is {gpu_memory_gb}GB, you may not have enough memory to run a Gemma LLM locally without quantization\")\n",
        "elif gpu_memory_gb < 8.1:\n",
        "    print(f\"GPU memory: {gpu_memory_gb} | Recommended Model: Gemma 2B im 4-bit precision.\")\n",
        "    use_quantization_config = True\n",
        "    model_id = \"google/gemma-2b-it\"\n",
        "elif gpu_memory_gb < 19.0:\n",
        "    print(f\"GPU Memory: {gpu_memory_gb} | Recommended Model: Gemma 2B in float 16 or Gemma 7B in 4 bit precision.\")\n",
        "    use_quantization_config = False\n",
        "    model_id = \"google/gemma-2b-it\"\n",
        "elif gp_memory_gb > 19.0:\n",
        "    print(f\"GPU Memory: {gpu_memory_gb} | Recommended Model: Gemma 7B in 4 bit precision or float16 precision.\")\n"
      ],
      "metadata": {
        "id": "k65XbAE3YhXH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!nvidia-smi"
      ],
      "metadata": {
        "id": "g0QnIQ7FY1F7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QeyqOTCkZzCp",
        "outputId": "9091f2d8-3cf9-4494-f981-fd07510bbb1a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "path = \"/content/drive/MyDrive/text_chunks_and_embeddings_df.csv\""
      ],
      "metadata": {
        "id": "Mso00D5caQwe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "embedding_df_save_path = path\n",
        "text_chunks_and_embeddings_df_load = pd.read_csv(embedding_df_save_path)\n",
        "text_chunks_and_embeddings_df_load.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "id": "fSIro-DIalgB",
        "outputId": "e4d02068-2338-47cf-f9d1-254df3cc61b9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   page_number                                     sentence_chunk  \\\n",
              "0          -20  PRENTICE HALL SERIES IN ARTIFICIAL INTELLIGENC...   \n",
              "1          -19  Artiﬁcial Intelligence A Modern Approach Third...   \n",
              "2          -18  Vice President and Editorial Director, ECS: Ma...   \n",
              "3          -15  Preface Artiﬁcial Intelligence (AI) is a big ﬁ...   \n",
              "4          -15  Most important from our point of view is the c...   \n",
              "\n",
              "   chunk_char_count  chunk_word_count  chunk_token_count  \\\n",
              "0               327                47              81.75   \n",
              "1               420                61             105.00   \n",
              "2              2130               308             532.50   \n",
              "3              1245               198             311.25   \n",
              "4              1646               258             411.50   \n",
              "\n",
              "                                           embedding  \n",
              "0  [-1.30461548e-02  2.68112104e-02 -4.13668528e-...  \n",
              "1  [ 5.09229582e-03  5.46925478e-02 -6.23469651e-...  \n",
              "2  [ 5.17049171e-02  3.89343500e-02 -2.46169083e-...  \n",
              "3  [ 3.05054262e-02  1.73628889e-02 -4.83833812e-...  \n",
              "4  [ 2.90427636e-02  7.53119681e-03 -3.85300419e-...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-915c6583-b1e8-489e-92d0-74f8fc9cbb0f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>page_number</th>\n",
              "      <th>sentence_chunk</th>\n",
              "      <th>chunk_char_count</th>\n",
              "      <th>chunk_word_count</th>\n",
              "      <th>chunk_token_count</th>\n",
              "      <th>embedding</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-20</td>\n",
              "      <td>PRENTICE HALL SERIES IN ARTIFICIAL INTELLIGENC...</td>\n",
              "      <td>327</td>\n",
              "      <td>47</td>\n",
              "      <td>81.75</td>\n",
              "      <td>[-1.30461548e-02  2.68112104e-02 -4.13668528e-...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-19</td>\n",
              "      <td>Artiﬁcial Intelligence A Modern Approach Third...</td>\n",
              "      <td>420</td>\n",
              "      <td>61</td>\n",
              "      <td>105.00</td>\n",
              "      <td>[ 5.09229582e-03  5.46925478e-02 -6.23469651e-...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-18</td>\n",
              "      <td>Vice President and Editorial Director, ECS: Ma...</td>\n",
              "      <td>2130</td>\n",
              "      <td>308</td>\n",
              "      <td>532.50</td>\n",
              "      <td>[ 5.17049171e-02  3.89343500e-02 -2.46169083e-...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-15</td>\n",
              "      <td>Preface Artiﬁcial Intelligence (AI) is a big ﬁ...</td>\n",
              "      <td>1245</td>\n",
              "      <td>198</td>\n",
              "      <td>311.25</td>\n",
              "      <td>[ 3.05054262e-02  1.73628889e-02 -4.83833812e-...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-15</td>\n",
              "      <td>Most important from our point of view is the c...</td>\n",
              "      <td>1646</td>\n",
              "      <td>258</td>\n",
              "      <td>411.50</td>\n",
              "      <td>[ 2.90427636e-02  7.53119681e-03 -3.85300419e-...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-915c6583-b1e8-489e-92d0-74f8fc9cbb0f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-915c6583-b1e8-489e-92d0-74f8fc9cbb0f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-915c6583-b1e8-489e-92d0-74f8fc9cbb0f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9fcb5338-5d6e-4668-be82-4cbe0a6111b5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9fcb5338-5d6e-4668-be82-4cbe0a6111b5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9fcb5338-5d6e-4668-be82-4cbe0a6111b5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "text_chunks_and_embeddings_df_load",
              "summary": "{\n  \"name\": \"text_chunks_and_embeddings_df_load\",\n  \"rows\": 3648,\n  \"fields\": [\n    {\n      \"column\": \"page_number\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 356,\n        \"min\": -20,\n        \"max\": 1128,\n        \"num_unique_values\": 1146,\n        \"samples\": [\n          200,\n          791,\n          483\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sentence_chunk\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3648,\n        \"samples\": [\n          \"The full joint probability distribution speci\\ufb01es the probability of each complete as- signment of values to random variables. It is usually too large to create or use in its explicit form, but when it is available it can be used to answer queries simply by adding up entries for the possible worlds corresponding to the query propositions. \\u2022Absolute independence between subsets of random variables allows the full joint dis- tribution to be factored into smaller joint distributions, greatly reducing its complexity. Absolute independence seldom occurs in practice. \\u2022Bayes\\u2019 rule allows unknown probabilities to be computed from known conditional probabilities, usually in the causal direction. Applying Bayes\\u2019 rule with many pieces of evidence runs into the same scaling problems as does the full joint distribution. \\u2022Conditional independence brought about by direct causal relationships in the domain might allow the full joint distribution to be factored into smaller, conditional distri- butions. The naive Bayes model assumes the conditional independence of all effect variables, given a single cause variable, and grows linearly with the number of effects. \\u2022A wumpus-world agent can calculate probabilities for unobserved aspects of the world, thereby improving on the decisions of a purely logical agent. Conditional independence makes these calculations tractable.\",\n          \"Correlation and causation. J. Agricultural Research, 20, 557\\u2013585. Wright, S. (1931). Evolution in Mendelian popula- tions. Genetics, 16, 97\\u2013159. Wright, S. (1934). The method of path coef\\ufb01cients. Annals of Mathematical Statistics, 5, 161\\u2013215. Wu, D. (1993). Estimating probability distributions over hypotheses with variable uni\\ufb01cation.\",\n          \"1130 Index unit (in a neural network), 728 unit clause, 253, 260, 355 United States, 13, 629, 640, 753, 755, 922, 1034, 1036 unit preference, 355 unit preference strategy, 355 unit propagation, 261 unit resolution, 252, 355 units function, 444 universal grammar, 921 Universal Instantiation, 323 universal plan, 434 unmanned air vehicle (UAV), 971 unmanned ground vehicle (UGV), 971 UNPOP, 394 unrolling, 544, 595 unsatis\\ufb01ability, 274 unsupervised learning, 694, 817\\u2013820, 1025 UOSAT-II, 432 update, 142 upper ontology, 467 URL, 463 Urmson, C., 1014, 1091 urn-and-ball, 803 URP, 638 Uskov, A. V., 192, 1064 Utgoff, P. E., 776, 799, 1082 utilitarianism, 7 utility, 9, 53, 162, 482 axioms of, 613 estimation, 833 expected, 53, 61, 483, 610, 611, 616 function, 53, 54, 162, 611, 615\\u2013621, 846 independence, 626 maximum expected, 483, 611 of money, 616\\u2013618 multiattribute, 622\\u2013626, 636, 648 multiplicative, 626 node, 627 normalized, 615 ordinal, 614 theory, 482, 611\\u2013615, 636 utility-based agent, 1044 utopia, 1052 UWL, 433 V vacuum tube, 16 vacuum world, 35, 37, 62, 159 erratic, 134 slippery, 137 vagueness, 547 Valiant, L., 759, 1091 validation cross, 737, 759, 767 validation, cross, 708 validation set, 709 validity, 249, 274 value, 58 VALUE-ITERATION, 653 value determination, 691 value function, 614 additive, 625 value iteration, 652, 652\\u2013656, 684 point-based, 686 value node, see utility node value of computation, 1048 value of information, 628\\u2013633, 636, 644, 659, 839, 1025, 1048 value of perfect information, 630 value symmetry, 226 VAMPIRE, 359, 360 van Beek, P., 228\\u2013230, 395, 470, 1065, 1078, 1087, 1091 van Bentham, J., 314, 1091 Vandenberghe, L., 155, 1066 van Harmelen, F., 473, 799, 1091 van Heijenoort, J., 360, 1091 van Hoeve, W.-J., 212, 228, 1091 vanishing point, 931 van Lambalgen, M., 470, 1091 van Maaren, H., 278, 1066 van Nunen, J. A. E. E., 685, 1091 van Run, P., 230, 1065 van der Gaag, L., 505, 1081 Van Emden, M. H., 472, 1091 Van Hentenryck, P., 228, 1091 Van Roy, B., 847, 855, 1090, 1091 Van Roy, P. L., 339, 342, 359, 1091 Vapnik, V. N., 759, 760, 762, 763, 967, 1066, 1069, 1080, 1091 Varaiya, P., 60, 856, 1072, 1079 Vardi, M. Y., 470, 477, 1072 variabilization (in EBL), 781 variable, 58 atemporal, 266 elimination, 524, 524\\u2013528, 552, 553, 596 in continuous state space, 131 indicator, 819 logic, 340 in logic, 295 ordering, 216, 527 random, 486, 515 Boolean, 486 continuous, 487, 519, 553 relevance, 528 Varian, H. R., 688, 759, 1081, 1091 variational approximation, 554 variational parameter, 554 Varzi, A., 470, 1068 Vaucanson, J., 1011 Vauquois, B., 909, 1091 Vazirani, U., 154, 763, 1064, 1078 Vazirani, V., 688, 1084 VC dimension, 759 VCG, 683 Vecchi, M. P., 155, 229, 1078 vector, 1055 vector \\ufb01eld histograms, 1013 vector space model, 884 vehicle interface layer, 1006 Veloso, M., 799, 1091 Vempala, S., 883, 1084 Venkataraman, S., 686, 1074 Venugopal, A., 922, 1093 Vere, S. A., 431, 1091 veri\\ufb01cation, 356 hardware, 312 Verma, T., 553, 826, 1073, 1085 Verma, V., 605, 1091 Verri, A., 968, 1090 VERSION-SPACE-LEARNING, 773 VERSION-SPACE-UPDATE, 773 version space, 773, 774, 798 version space collapse, 776 Vetterling, W. T., 155, 1086 Vickrey, W., 681 Vickrey-Clarke-Groves, 683 Vienna, 1028 views, multiple, 948 Vinge, V., 12, 1038, 1091 Viola, P., 968, 1025, 1091 virtual counts, 812 visibility graph, 1013 vision, 3, 12, 20, 228, 929\\u2013965 Visser, U., 195, 1014, 1091 Visser, W., 356, 1075 Vitali set, 489 Vitanyi, P. M. B., 759, 1080 Viterbi, A. J., 604, 1091 Viterbi algorithm, 578 Vlassis, N., 435, 686, 1089, 1091 VLSI layout, 74, 110, 125 vocabulary, 864 Volk, K., 826, 1074 von Mises, R., 504, 1091 von Neumann, J., 9, 15, 17, 190, 613, 637, 687, 1091 von Stengel, B., 677, 687, 1078 von Winterfeldt, D., 637, 1091 von Kempelen, W., 190 von Linne, C., 469 Voronkov, A., 314, 359, 360, 1086, 1087\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chunk_char_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 543,\n        \"min\": 121,\n        \"max\": 4094,\n        \"num_unique_values\": 1458,\n        \"samples\": [\n          263,\n          1627,\n          1167\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chunk_word_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 92,\n        \"min\": 17,\n        \"max\": 719,\n        \"num_unique_values\": 371,\n        \"samples\": [\n          309,\n          316,\n          151\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chunk_token_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 135.94964189224214,\n        \"min\": 30.25,\n        \"max\": 1023.5,\n        \"num_unique_values\": 1458,\n        \"samples\": [\n          65.75,\n          406.75,\n          291.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embedding\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3648,\n        \"samples\": [\n          \"[-1.94691308e-03  5.29608652e-02 -2.05226452e-03 -5.19037880e-02\\n -1.06942356e-01  1.12769669e-02  2.37988811e-02  2.55500562e-02\\n  2.03759242e-02 -2.83111483e-02  7.45500773e-02 -3.08146011e-02\\n -8.94631445e-03  1.07165128e-02 -4.73269820e-03 -6.88125789e-02\\n  1.80792045e-02 -2.11647842e-02  1.85038839e-02 -2.42028330e-02\\n -5.76437041e-02 -8.36064667e-02 -5.98209761e-02  1.88293271e-02\\n -1.59791801e-02  2.46311608e-03 -3.47120035e-03 -8.22463445e-03\\n -2.91617587e-02  3.96934412e-02 -3.74212526e-02  7.40873022e-03\\n -2.42009223e-03 -3.62358168e-02  2.20190782e-06 -8.19498207e-03\\n -5.17213382e-02 -4.84860409e-03  6.72082677e-02 -1.38406800e-02\\n -5.19714169e-02  5.43685816e-02  3.03814486e-02  3.15322680e-03\\n -2.66633835e-02 -2.76508857e-03  3.97325568e-02  3.51966210e-02\\n -4.11070548e-02  6.22794917e-03  5.26676467e-03 -1.07818339e-02\\n -1.62855461e-02 -1.16144335e-02  6.04515783e-02 -3.47545892e-02\\n  1.84794739e-02  1.26788057e-02  3.51768732e-02 -5.41993119e-02\\n -6.80474099e-03 -8.39764997e-03  3.02945059e-02  1.32402191e-02\\n -1.78945158e-02  1.08825639e-02  2.83240713e-02 -4.47922610e-02\\n -3.35343741e-02  1.24124652e-02  9.39843878e-02 -5.61056705e-03\\n  1.20845973e-03 -2.11048103e-03  1.86606925e-02  1.01043493e-01\\n -4.96475138e-02  4.62504998e-02 -4.01535444e-02  6.16935268e-03\\n  4.12454568e-02  6.57324567e-02  3.37351188e-02  1.30393368e-03\\n -4.88641970e-02  1.05572022e-01  1.27691217e-02 -3.25114536e-03\\n -5.52764535e-02  7.51029104e-02  2.29995325e-02 -2.38637999e-02\\n  2.23941356e-02 -6.08502701e-03 -9.66408849e-03 -1.03087137e-02\\n  8.58740509e-03  4.65962291e-02  1.13300439e-02 -7.72234201e-02\\n -3.02722417e-02  2.30010767e-02  8.59521516e-03  2.56518647e-02\\n  7.41646141e-02 -5.59389666e-02 -3.93391140e-02 -1.94332488e-02\\n  1.73847992e-02  2.53038481e-02 -3.48537415e-02 -1.33992769e-02\\n  3.35035026e-02  1.78154577e-02 -3.91215645e-02 -3.03951208e-03\\n  3.60426470e-03  2.14941874e-02 -1.48584312e-02 -6.30571693e-02\\n  7.14078918e-03  2.42315438e-02 -2.31391960e-03  3.05369236e-02\\n -7.61792213e-02  7.44598277e-04 -8.35627839e-02  4.09609228e-02\\n  9.25940368e-03 -1.89203769e-02  3.01742330e-02 -2.10946016e-02\\n  4.34634462e-02 -2.76898630e-02 -3.05079911e-02  9.48676690e-02\\n  3.30788828e-02  6.74973195e-03 -5.37631847e-02 -1.45672299e-02\\n  3.28826196e-02 -2.30246391e-02 -1.37379942e-02 -1.92440506e-02\\n -1.52419209e-02  1.78781040e-02  2.13536918e-02  1.67972837e-02\\n -2.24593077e-02 -6.15132116e-02 -3.33078057e-02  5.42611443e-03\\n  3.64781842e-02  1.21819112e-03  2.15805490e-02  6.89920038e-03\\n  8.29792861e-03  6.10354096e-02 -1.33546516e-02  4.67752386e-03\\n -1.23116290e-02  1.62408408e-02  6.06053360e-02 -3.91810164e-02\\n -4.95277382e-02  5.60784489e-02 -4.33801413e-02 -2.85586827e-02\\n  2.43350137e-02 -3.68264243e-02 -3.29459384e-02 -2.32516136e-02\\n -1.00250300e-02  6.91549927e-02  5.46508878e-02 -8.44672397e-02\\n  1.92547515e-02 -3.76450568e-02  4.35273834e-02 -1.62839206e-04\\n  4.44085598e-02  5.33987805e-02 -3.31950448e-02  9.41489544e-03\\n -1.64530780e-02 -1.22333989e-02  1.60547178e-02 -2.01895293e-02\\n  1.25458846e-02 -4.73718978e-02  4.87855263e-02 -3.08200568e-02\\n -4.66558821e-02  9.07771010e-03  7.51653537e-02 -2.67210435e-02\\n  5.10622784e-02 -1.64748691e-02  6.13796227e-02 -2.61849118e-03\\n  5.50441816e-03  7.42892502e-03  6.07403135e-03  2.00616419e-02\\n  2.95148734e-02 -3.80722769e-02  4.13510622e-03  9.66636837e-03\\n -1.05735496e-01 -6.59257844e-02  4.67621256e-03  2.67723985e-02\\n  2.71226466e-02  1.23855816e-02 -3.10149267e-02  3.96453366e-02\\n  5.49805425e-02  3.69592495e-02 -2.62132380e-02 -2.32496429e-02\\n -5.71980551e-02 -6.80713542e-03  6.39312491e-02 -2.26591304e-02\\n  3.74802239e-02  1.97361112e-02  1.83358938e-02 -4.93671186e-03\\n  4.45269383e-02  3.47708091e-02 -6.89113811e-02  2.91492417e-02\\n  2.20565218e-03  9.55100358e-03 -6.31052032e-02  3.65438126e-02\\n  4.39411514e-02  5.53285703e-02 -3.92249739e-03 -4.50748801e-02\\n  4.50752415e-02 -3.66048962e-02  4.49862704e-02 -4.28689197e-02\\n  1.60241984e-02  2.89860349e-02 -1.57605596e-02  5.15236631e-02\\n  1.96141051e-03 -3.92031111e-02  3.26541043e-03 -1.40848020e-02\\n  3.27295661e-02  1.78296063e-02 -5.11147901e-02 -2.01171506e-02\\n -3.67062800e-02  3.18461731e-02 -5.16576096e-02  4.28108759e-02\\n -7.57037774e-02  1.96679332e-03 -9.60754883e-03  6.30090460e-02\\n -1.49056595e-02  7.63816712e-03 -8.41220375e-03 -1.46407736e-02\\n  2.27004811e-02  8.62366427e-03  5.86519425e-04 -3.19707766e-02\\n  5.87832779e-02 -3.17387618e-02  1.71265751e-02  3.45707592e-03\\n  6.80872938e-03 -4.00400534e-02 -7.00956723e-03 -1.31623577e-02\\n -1.07518965e-02  2.55477447e-02 -2.94302963e-02 -3.72557081e-02\\n -8.47688317e-03  1.74075328e-02  9.49276164e-02 -2.88625415e-02\\n  5.56287449e-03  1.33087151e-02  5.29322494e-03  1.03455624e-02\\n -1.25932628e-02 -8.01339105e-04 -2.28719227e-02 -7.22872168e-02\\n -2.11099461e-02  2.02254653e-02 -1.73210744e-02  5.22448274e-04\\n  6.67355135e-02 -3.76023091e-02 -9.50947404e-03  7.69518316e-03\\n -6.99395910e-02  3.48120667e-02 -2.87932027e-02 -3.31832394e-02\\n -3.86919715e-02 -5.95484395e-03  4.21026349e-02 -3.45502533e-02\\n -2.82113776e-02  2.80748531e-02 -1.04332333e-02 -6.13034889e-02\\n -4.72631422e-04 -2.40735635e-02  2.76322234e-02  3.90840620e-02\\n  1.58252139e-02 -5.45475334e-02  1.71906538e-02  6.93262136e-03\\n  7.43535087e-02 -3.52916494e-02  1.79858203e-03 -2.40292144e-03\\n  2.67861169e-02  4.29855920e-02 -1.14088971e-02  6.56114845e-03\\n  1.59568340e-02  9.92938876e-03  1.75650865e-02  3.41503769e-02\\n  2.23100707e-02 -3.52852419e-02 -7.43304417e-02  9.42623895e-03\\n  3.47680636e-02 -3.33153680e-02 -9.23603773e-03 -8.71673226e-03\\n  7.75883114e-03 -2.21074373e-02 -2.44289190e-02 -1.81168001e-02\\n -1.64783560e-02  2.64066216e-02  6.38154447e-02 -1.72169488e-02\\n -3.17934304e-02  2.39166943e-03 -2.16344446e-02 -4.65808325e-02\\n  7.21947895e-03 -6.12036437e-02 -2.93833725e-02 -4.82932758e-03\\n -5.45961596e-02 -1.58546623e-02  6.50367886e-02  5.62917776e-02\\n  2.62777060e-02  1.66074820e-02  1.59542018e-03  1.79937528e-03\\n -6.60107518e-03  1.12988753e-02 -8.59447196e-03  2.99935956e-02\\n  3.43240462e-02  5.42224422e-02 -1.52727468e-02 -2.78350972e-02\\n -1.42491292e-02 -4.77093346e-02 -8.73279274e-02 -1.40076950e-02\\n -1.03155430e-02 -5.76808080e-02 -6.91572344e-03 -1.57436747e-02\\n -4.00512405e-02 -5.67566827e-02 -5.06265946e-02  9.28844288e-02\\n -2.35237516e-02  2.44074818e-02 -7.64203537e-03  2.11498374e-03\\n -3.68205309e-02 -4.16094996e-02 -1.63845737e-02 -4.61568162e-02\\n -6.28534034e-02 -2.54704189e-02  4.09773737e-02  1.49595169e-02\\n  2.61464585e-02 -1.62132573e-03 -1.50059201e-02 -4.26688977e-02\\n -5.73801212e-02 -3.09020188e-02  2.79575326e-02  2.34079664e-03\\n -1.01326816e-01 -8.20122845e-03 -6.92257956e-02 -1.62954684e-02\\n  2.30988562e-02 -6.20655192e-04  1.83595531e-02  5.40827587e-02\\n  1.66026969e-02 -2.25463305e-02 -2.90011931e-02  4.44531403e-02\\n -1.23504950e-02  3.40155810e-02  4.09166887e-02 -7.10204616e-02\\n -2.50510275e-02 -2.29739938e-02 -5.53372391e-02  4.48080190e-02\\n  3.02131958e-02 -8.53608642e-03 -4.12414037e-02 -3.54305468e-02\\n -5.02688717e-03 -1.60285328e-02  1.61946453e-02  6.48671463e-02\\n -1.63774174e-02 -2.75160242e-02 -7.30590001e-02 -1.49426442e-02\\n  1.51103102e-02 -9.44338646e-03  7.22963512e-02  3.09087485e-02\\n  2.05382821e-03  1.91315729e-02  1.06595242e-02 -6.85863616e-03\\n  5.70614007e-04  3.65372449e-02 -1.91221554e-02  4.98307273e-02\\n -1.66842360e-02  8.65652878e-03 -2.81148106e-02 -3.64307016e-02\\n  4.10147663e-03  1.88797005e-02 -3.91348451e-02  5.12599871e-02\\n  6.90665767e-02  3.71696092e-02 -4.04634811e-02 -2.88569219e-02\\n -3.77687104e-02 -3.31076682e-02 -1.18623823e-02  2.43606642e-02\\n  5.87563124e-03 -2.90623459e-04 -2.08215844e-02  1.17903961e-04\\n -2.05888972e-02 -3.55056450e-02  2.47815414e-03 -1.45499958e-02\\n  1.31098013e-02 -2.41200346e-02 -1.89727955e-02 -3.84178720e-02\\n  1.06717199e-02  6.31598383e-02 -1.91903431e-02  2.98916828e-02\\n -2.22025160e-02  9.99844912e-03 -2.94502042e-02 -1.88342296e-02\\n -8.34435131e-03  3.73619720e-02  5.79997711e-02  5.26054017e-02\\n  3.11260782e-02  1.69481523e-02  1.02142338e-03 -3.61867063e-02\\n  2.59741377e-02  2.49572489e-02  8.96636397e-02 -6.61639357e-03\\n  5.23969233e-02 -2.93783955e-02  3.23496312e-02 -3.31277885e-02\\n  3.85771096e-02  2.70885741e-03  3.05762403e-02 -2.58548912e-02\\n  1.75811090e-02 -5.33234105e-02 -4.78186868e-02 -8.36500376e-02\\n -6.46802559e-02 -4.08322327e-02  6.66919351e-02  7.37185106e-02\\n  4.78673801e-02  3.98360603e-02 -8.42124596e-03 -4.62782905e-02\\n  1.24507062e-02 -6.42766012e-03  2.03508455e-02  7.92116746e-02\\n  6.10620156e-02 -1.57797430e-02 -1.90338038e-03 -3.73675823e-02\\n  1.55898351e-02  2.17067171e-02 -2.46915803e-03  3.51138450e-02\\n -8.88192952e-02 -9.96997580e-03  1.41968057e-02 -2.18081549e-02\\n  2.15784535e-02  5.84670268e-02 -2.36430466e-02  2.37361509e-02\\n -7.59542733e-02  2.06038598e-02 -3.80381532e-02  4.25998196e-02\\n  4.47607078e-02 -2.50610001e-02 -3.76416408e-02  4.41689193e-02\\n -5.63109200e-03 -1.36533817e-02 -4.99766506e-02  3.46800908e-02\\n -4.14011702e-02  2.82548144e-02  6.12032041e-03 -6.93637543e-33\\n  1.43708577e-02 -1.55092555e-03  2.91679357e-03 -7.54219526e-03\\n  3.60907381e-03 -6.77620023e-02  6.04283530e-03 -1.16647845e-02\\n  3.40156853e-02  2.91872560e-03  5.74872363e-03 -1.30547711e-03\\n  2.42815651e-02  4.33041190e-04  4.39467542e-02 -8.66508402e-04\\n -1.36925802e-02  2.51479689e-02 -2.98191584e-03 -3.06259505e-02\\n  4.00216915e-02 -4.71404288e-03 -2.12532952e-02 -2.37656962e-02\\n  5.56703880e-02  3.61234555e-03 -6.62468793e-03  2.43825186e-02\\n -5.51350601e-02  1.48105733e-02  2.72787660e-02 -1.38089042e-02\\n  1.00884708e-02 -9.16289631e-03  1.62563547e-02  8.56393762e-03\\n -1.94722209e-02 -2.03280393e-02  2.83701122e-02  2.19464414e-02\\n  1.26332575e-02 -2.94077769e-02  3.41213075e-03  8.56748894e-02\\n -1.09550375e-02 -2.32472565e-04  9.61571233e-04 -2.72364467e-02\\n  1.56576671e-02 -2.95661204e-02  1.01470714e-03  2.16076411e-02\\n -7.85317831e-03  6.01885580e-02 -1.17439625e-03 -1.03203068e-02\\n -1.23722181e-02 -5.27787842e-02  5.10806479e-02  2.69006956e-02\\n  6.76685944e-02 -1.50494846e-02  7.27312872e-03  3.09876651e-02\\n  1.94480866e-02  3.74327973e-02  4.73415107e-02 -3.34560871e-02\\n -2.84808632e-02 -5.76144010e-02 -5.01256660e-02  3.10333557e-02\\n -1.49840256e-02  9.26577076e-02  3.01612318e-02  2.90742815e-02\\n -1.23988323e-01  5.73998876e-02  6.51930347e-02 -3.92873622e-02\\n  1.26193836e-02  2.79988591e-02 -4.32475284e-02 -2.07875855e-02\\n -8.18700902e-03 -1.71765536e-02 -2.14629545e-04  2.75724637e-03\\n -3.29956524e-02  2.93888291e-03 -1.41536454e-02  2.34247167e-02\\n  1.40330940e-03 -6.10480085e-03 -3.14806635e-03 -9.41922553e-05\\n  3.45494375e-02 -8.60245433e-03 -9.36474744e-03 -4.29618545e-02\\n  1.61549393e-02 -1.18426187e-02 -1.21957352e-02  3.53838899e-03\\n -8.93514045e-03  4.74963337e-02 -4.05030623e-02  5.24024991e-03\\n  1.00279329e-02 -2.00899355e-02 -7.89484195e-03 -2.44544838e-02\\n  2.36576907e-02 -4.79366183e-02  2.70347074e-02  1.06848599e-02\\n -7.90768318e-05 -6.08649012e-03 -1.80062279e-02  2.11128797e-02\\n  1.90754663e-02  1.21651171e-02 -3.64360176e-02  7.61861913e-03\\n  8.88948329e-03 -1.75407645e-03 -3.18689607e-02 -2.48226784e-02\\n -6.33896654e-03 -3.46505530e-02 -2.89995261e-02  3.70159820e-02\\n  2.98985725e-07  4.81820032e-02  1.53033463e-02  3.33838910e-02\\n  6.15689009e-02  4.46343012e-02  6.29389361e-02 -2.66211666e-02\\n  3.26917507e-03  5.38708009e-02  4.02643010e-02  1.71808340e-02\\n -1.73434447e-02 -2.00295430e-02 -9.94071830e-03 -3.03906146e-02\\n -3.21162082e-02  4.81530838e-02 -2.67159343e-02  8.77222884e-03\\n  9.25863069e-03  3.64698805e-02  5.77156618e-03  7.88491592e-02\\n -1.58701534e-03  6.55771792e-02 -1.60734951e-02 -9.90122464e-03\\n -2.04317477e-02 -1.73753768e-04  8.66473187e-03 -1.68477576e-02\\n -6.10827394e-02  4.68341894e-02  6.70127943e-02 -8.64992850e-03\\n -2.57707909e-02 -1.45416828e-02  4.78764288e-02  1.65138126e-03\\n  4.47484516e-02 -1.20383911e-02 -8.01257566e-02  4.70233932e-02\\n -1.46337207e-02  8.20226297e-02 -1.87850487e-03 -4.57966812e-02\\n  7.19706267e-02 -9.19422787e-03  6.65514497e-03 -3.21391746e-02\\n  6.37000650e-02 -1.48902126e-02 -4.26744148e-02 -4.43634056e-02\\n  5.84548190e-02 -7.32268905e-04 -1.56904489e-03  7.29021570e-03\\n  2.58804522e-02 -3.59968096e-02 -8.79658386e-02  4.89319749e-02\\n -1.99073646e-02  4.86299992e-02 -5.11422381e-02 -6.72282185e-03\\n  2.74638758e-34 -1.66037530e-02  5.96626922e-02 -9.75806545e-03\\n -3.02633010e-02  1.50351925e-02 -9.99380136e-04 -8.84788409e-02\\n -1.03129232e-02  2.29686499e-02 -1.47420764e-02  2.35526729e-03]\",\n          \"[-5.49185015e-02  5.98075055e-02 -3.98542546e-02 -2.57082619e-02\\n -7.94482604e-02 -1.33384187e-02  1.78161729e-02 -4.09281626e-02\\n -2.60045435e-02 -2.11939532e-02  1.03876464e-01  4.41439413e-02\\n  2.39410698e-02 -2.50577498e-02  3.54707539e-02 -1.90457590e-02\\n  3.63646453e-04 -1.27368942e-02 -1.38539094e-02 -6.25268556e-04\\n -5.81997931e-02 -4.81663458e-02 -4.27160086e-03  3.51948440e-02\\n -2.26738919e-02 -1.71322487e-02  8.28128215e-03  1.15974545e-02\\n  1.03096021e-02 -2.97283456e-02  2.07020412e-03 -1.50587279e-02\\n  8.62426707e-04  1.07788984e-02  2.13285489e-06 -4.89519872e-02\\n -8.05509835e-03  5.78308553e-02 -2.01020874e-02  2.60032620e-02\\n  1.45513855e-03  7.40177929e-02 -2.03310587e-02 -2.42828969e-02\\n  5.26567027e-02  6.58609346e-02  4.72682044e-02 -1.29247399e-03\\n -6.12943284e-02 -3.86372395e-02 -6.46046828e-03 -2.52487906e-03\\n  3.68316807e-02 -6.72440305e-02  6.39630258e-02  9.67375655e-03\\n  5.44320531e-02  2.15888023e-02  1.29870893e-02  1.12458309e-02\\n -6.65215179e-02  2.15193611e-02  2.46127062e-02  2.46755313e-02\\n -4.72461730e-02 -8.11968744e-03  8.36596359e-03 -2.40691360e-02\\n  2.68717278e-02  2.62772534e-02  8.62308964e-02  9.86458361e-03\\n  1.22841168e-02 -1.93126383e-04  8.25630501e-03  1.15743861e-01\\n -2.30980385e-02 -4.08239514e-02 -3.48084234e-02 -5.89375421e-02\\n  7.45009333e-02 -1.89805813e-02  1.48111945e-02  1.27598019e-02\\n  2.81452127e-02  7.92615414e-02  4.82573435e-02 -2.03133337e-02\\n -4.39559924e-04 -3.09213847e-02  5.04653379e-02 -4.17592116e-02\\n -3.85950580e-02  2.84229647e-02  3.44302952e-02 -4.37899269e-02\\n  8.02362710e-02 -3.40325572e-02  6.14611730e-02 -2.42036469e-02\\n -7.55365938e-03  6.18854072e-04 -2.24325573e-03 -1.04366736e-02\\n -3.63891572e-02 -3.76233645e-02 -1.02068961e-01  3.19519080e-02\\n  8.34583025e-03  1.58444941e-02 -3.18639018e-02 -2.02838774e-03\\n -4.36442066e-03 -5.85576855e-02  2.78652385e-02  1.87056628e-03\\n -4.69273739e-02 -1.15203494e-02  1.24259824e-02 -4.99015041e-02\\n -5.18982820e-02  4.34869155e-03 -1.25293236e-03  3.39124091e-02\\n -2.95190066e-02  2.46968623e-02 -6.56810552e-02  1.38235958e-02\\n -3.35760266e-02 -4.32956591e-02 -1.68035664e-02 -2.46606283e-02\\n  4.96469177e-02 -1.62255764e-03  1.91103462e-02  1.86182167e-02\\n  5.06757759e-02  1.12183839e-02 -2.95525119e-02  2.17587054e-02\\n -4.87274528e-02  2.77418047e-02 -3.11841983e-02 -4.52200249e-02\\n -1.09393848e-02  2.46942751e-02  1.94404982e-02  1.38021037e-02\\n  1.79214217e-02 -1.25638600e-02 -7.94257671e-02 -1.37982434e-02\\n  2.10476033e-02  5.33783669e-03  1.93335526e-02  2.30438099e-03\\n  1.14854276e-02  1.58257782e-02 -7.04003219e-03  1.43349906e-02\\n -2.21449155e-02 -4.68346698e-04  1.02144174e-01 -3.54908779e-02\\n -8.03570822e-03  5.92053868e-03  2.24626176e-02 -2.17703413e-02\\n  5.47539704e-02 -4.78808098e-02  2.34159417e-02 -3.22907381e-02\\n -4.37526256e-02  1.96126308e-02  4.16527677e-04  2.06193682e-02\\n  4.54541110e-02  3.57420221e-02  9.54166204e-02 -3.30709256e-02\\n -1.18864365e-02 -1.50775746e-03 -1.10541573e-02  3.94700952e-02\\n -1.10209450e-01 -7.83245265e-03 -8.16370174e-03  1.00356983e-02\\n  1.00902896e-02 -4.52124327e-02  2.26841178e-02 -8.46673734e-03\\n -2.01789513e-02 -2.32676622e-02  5.85753061e-02 -6.50794432e-03\\n  4.66684103e-02 -4.41155955e-02 -3.06254420e-02  1.29587203e-02\\n -2.15727761e-02  4.54933830e-02  4.31516878e-02 -2.42378525e-02\\n  1.92843075e-03 -1.16992900e-02  1.13470964e-02  2.34140940e-02\\n -9.72057413e-03 -5.26545681e-02 -5.19134663e-02 -2.09756121e-02\\n  9.57620144e-03  4.17754017e-02  3.44132539e-03  1.10079786e-02\\n  1.07244197e-02 -3.45069147e-03 -4.27067168e-02  5.23553714e-02\\n -5.82907116e-03 -7.29199033e-03  7.77311344e-03 -9.82925110e-03\\n -4.13204581e-02  4.50821547e-03 -3.18139680e-02 -3.05449180e-02\\n  4.94872257e-02 -3.15144584e-02 -5.57008646e-02  2.17593890e-02\\n -5.02867289e-02  2.37491783e-02 -4.87598740e-02  7.07833394e-02\\n  1.07102327e-01  5.79712763e-02 -3.03702131e-02 -7.00578690e-02\\n -1.59865711e-02 -6.44287542e-02  5.39656554e-04  2.61857174e-02\\n  8.47588405e-02 -1.12176463e-02  4.71122973e-02 -1.18481903e-03\\n  2.32299627e-03 -1.05564557e-02  1.40409237e-02  1.99443903e-02\\n  2.17257440e-02  4.69200835e-02  3.17001641e-02  1.99716501e-02\\n -5.58898114e-02  4.54516895e-02 -3.78958695e-02  3.89518254e-02\\n -4.89149876e-02 -8.68966896e-03 -5.30138426e-02  2.96755694e-02\\n  7.15434970e-03 -6.58449624e-03 -1.21658146e-02  1.81920715e-02\\n -3.28614004e-02  3.99389677e-03  4.99632470e-02 -3.89777534e-02\\n -1.31668607e-02 -1.55923702e-02  5.61652370e-02  3.70800458e-02\\n  2.87147406e-02 -1.19555350e-02  2.06213649e-02  2.76652351e-02\\n -5.20302504e-02 -2.97543108e-02 -5.46233505e-02 -2.30692024e-03\\n -4.35046554e-02  2.11601723e-02 -5.12429571e-04 -1.07281301e-02\\n  3.87567505e-02 -2.77538635e-02 -3.28479931e-02 -3.42990877e-03\\n -2.58827414e-02  7.23686954e-03 -1.36470823e-02  1.19577413e-02\\n  5.08510098e-02  3.21046412e-02 -3.02297412e-04  1.01542659e-03\\n -2.84600854e-02 -1.90757879e-03 -1.53760277e-02  2.09655911e-02\\n -3.83171551e-02  6.08658977e-03 -9.03249485e-04 -6.23300746e-02\\n  3.89596540e-03  9.20947816e-04 -5.08362195e-03 -3.38874422e-02\\n  2.26755403e-02  2.37111989e-02 -5.71196899e-03  2.52605509e-02\\n  3.84059967e-03 -4.46653087e-03  1.70976799e-02  3.58628333e-02\\n -1.15905348e-02 -4.91718762e-02 -1.63416211e-02  1.54355832e-03\\n  2.08244696e-02 -5.05379289e-02 -1.55683523e-02  5.04310690e-02\\n  4.19831350e-02  3.06025278e-02 -2.75616348e-02  4.81148176e-02\\n  1.61364563e-02 -1.98260173e-02  9.78346169e-03  2.44787708e-02\\n  6.80981949e-03 -4.69717607e-02 -6.61397651e-02 -8.56574159e-03\\n  8.30505509e-03  1.41784558e-02  1.46370362e-02 -5.34879193e-02\\n  3.38046923e-02 -3.74673912e-03  3.10693253e-02 -2.33865269e-02\\n  8.70734081e-03 -3.25018950e-02  5.20893149e-02 -2.56663468e-02\\n -5.25606982e-03  1.54450210e-03  8.64790566e-03  1.83076295e-03\\n  5.07836305e-02 -3.33153084e-02  1.82191120e-03 -5.31092212e-02\\n  1.47866365e-02 -3.66431810e-02 -1.15540931e-02  5.57123870e-02\\n  4.36505536e-03  2.60277111e-02 -3.63704525e-02 -1.86281055e-02\\n -1.90292988e-02  2.09090300e-02 -2.32196301e-02  4.28592414e-02\\n  4.94862460e-02  2.47163940e-02 -7.25254416e-03  5.22945412e-02\\n  5.88659849e-03 -7.59736523e-02 -1.00335563e-02  3.13965082e-02\\n  1.73278095e-03 -8.09379295e-03  6.45086095e-02 -1.84202120e-02\\n -5.93292676e-02 -3.68460342e-02 -2.93861255e-02  8.68791807e-03\\n -6.00258745e-02 -1.04732187e-02 -1.09359564e-03  2.27145273e-02\\n -8.73502064e-03 -4.00429405e-02 -1.12562431e-02 -4.53454889e-02\\n -4.93387729e-02  4.49102791e-03  6.97183050e-03  1.52540579e-02\\n  3.82995121e-02 -3.66349109e-02  1.25807049e-02  1.81419924e-02\\n -8.27965513e-02 -6.70975074e-03  4.79024276e-02  2.85223015e-02\\n -5.31693362e-02 -2.00490579e-02 -4.49740700e-03  3.22478227e-02\\n  3.44705284e-02  4.87153884e-03  4.00971361e-02  3.43119018e-02\\n  1.79017615e-02 -3.07658929e-02 -1.93529837e-02  4.48474521e-03\\n -1.55970985e-02  3.79190780e-02  4.63811979e-02  6.68160571e-03\\n -6.46502450e-02 -4.67174165e-02  1.86098237e-02 -1.36534742e-03\\n  3.57270166e-02  2.70753149e-02 -1.66150406e-02 -5.84033020e-02\\n -2.73362398e-02 -1.52531480e-02  3.30784954e-02  3.32905613e-02\\n -2.34516989e-02  4.25698655e-03 -6.52807206e-02 -3.04545425e-02\\n  3.61026675e-02  5.33717535e-02  7.95450509e-02  1.28990347e-02\\n  1.16944900e-02 -1.84034184e-02 -9.25754905e-02  6.79420726e-03\\n  2.84819957e-02  2.77090613e-02 -5.67878559e-02  6.53862953e-03\\n -2.63535185e-03  2.86810473e-02 -7.42341252e-03 -5.10816127e-02\\n  5.10107800e-02 -1.19645715e-01 -7.20917210e-02 -1.65771246e-02\\n  4.95832041e-02  2.33175084e-02  2.52535008e-02 -2.59482283e-02\\n  1.34145617e-02 -3.65651473e-02  3.32023762e-02  1.15937561e-01\\n  2.48928703e-02 -2.95235403e-02  4.40198276e-03  1.80709306e-02\\n -2.29112376e-02  1.52803175e-02  3.75795513e-02  4.51750215e-03\\n  2.58697551e-02 -3.64325419e-02 -5.83172077e-03 -1.45586096e-02\\n -5.13838492e-02  5.57212830e-02 -8.78005987e-04 -6.52999505e-02\\n  2.86263432e-02  3.48846242e-02  9.28190537e-03 -2.48580351e-02\\n  1.77284591e-02 -1.91531312e-02  8.52453231e-04  5.92629686e-02\\n -5.21607650e-03 -7.50516579e-02  4.93000681e-03  5.13991341e-02\\n  1.60552394e-02  5.44409826e-03  3.51879583e-03  9.84102301e-03\\n -6.29059039e-04  8.38142447e-03  4.90485206e-02 -1.02505069e-02\\n -1.66544560e-02  5.73190674e-02  2.96098106e-02 -2.61058453e-02\\n -4.11360264e-02 -2.23912974e-03  1.85615942e-02 -5.84537014e-02\\n -2.45311353e-02  3.73034663e-02 -1.21278977e-02  2.59463564e-02\\n  2.85771303e-02 -2.29396112e-02  1.41793890e-02 -3.65846455e-02\\n -8.70105345e-03 -4.62155268e-02  1.33883636e-02  1.36324083e-02\\n  7.24045038e-02 -5.77850314e-03  3.86400037e-02 -1.57624017e-02\\n  2.41027921e-02  2.14695930e-02  5.11315279e-02  8.03059898e-03\\n -1.00138545e-01 -4.55390848e-02  3.31729911e-02  2.05939356e-02\\n -3.83201726e-02 -5.01415581e-02  2.84381937e-02 -1.55403316e-02\\n -6.19587228e-02 -3.60372066e-02  2.13910472e-02  2.69895159e-02\\n  5.71331903e-02  4.57529724e-02 -7.31860027e-02 -2.43036039e-02\\n -1.71913896e-02 -1.76448748e-02 -7.05911499e-03  5.61972149e-03\\n -5.11497781e-02 -4.30916958e-02 -1.51968393e-02 -6.33719070e-33\\n -2.22518053e-02 -3.51284705e-02 -3.05842478e-02 -1.17361285e-02\\n  1.70860440e-02  1.16336640e-04 -1.20450445e-02 -2.72487290e-02\\n -2.76494399e-02 -8.31225712e-04  3.70496102e-02  3.32725942e-02\\n -7.10716983e-03  1.20435199e-02  1.87769365e-02 -1.90014893e-03\\n -3.02630719e-02  7.19467597e-03  3.43841203e-02 -5.22407405e-02\\n -2.00899076e-02 -5.95438853e-03 -1.34083517e-02  5.35550853e-03\\n  1.96180623e-02  2.66544186e-02 -9.86205973e-03 -2.68196557e-02\\n -7.72087425e-02 -1.41613407e-03  6.73018098e-02 -3.44041400e-02\\n -8.14015884e-03 -1.77003611e-02  4.72486727e-02 -2.14166846e-02\\n -2.71228869e-02 -2.09052023e-02  3.83728221e-02 -4.55179065e-02\\n -1.90099925e-02 -5.07790670e-02 -4.40241396e-03  5.28685674e-02\\n  8.45506322e-03 -1.00341523e-02  3.91066410e-02 -7.85831735e-03\\n -1.63793899e-02 -6.81039086e-03  4.88230120e-03 -1.95140429e-02\\n -6.27785698e-02  4.69993129e-02 -3.19358110e-02 -1.50430547e-02\\n  1.95804164e-02  6.21185731e-03  7.63790458e-02  3.61802578e-02\\n  5.12630232e-02  9.57747456e-04  3.00046224e-02  2.74600592e-02\\n  7.98345506e-02  2.52448432e-02 -1.84138212e-02 -1.68220233e-02\\n -3.05039044e-02 -8.93880725e-02 -2.28389725e-02 -1.61676332e-02\\n -1.32673373e-02  3.10687050e-02  1.55791212e-02 -6.56700134e-03\\n -6.02105409e-02  8.35943818e-02  5.68047054e-02 -6.26547635e-02\\n -3.04080751e-02  1.09448489e-02  1.04537113e-02  7.32277194e-03\\n -4.02664505e-02 -6.80239592e-03 -6.02739118e-03 -9.73581057e-03\\n -2.63728797e-02 -5.43612391e-02  4.45764214e-02 -3.16173881e-02\\n  3.59796546e-02  3.05319447e-02 -3.41872647e-02  8.73165205e-04\\n -3.60892527e-02  4.55280952e-02  2.69852560e-02  4.07442302e-02\\n  9.61997360e-03  8.25225469e-03 -1.46671766e-02  8.73971805e-02\\n  3.56350616e-02 -1.72543954e-02 -1.23299351e-02 -3.50724184e-03\\n -3.43370736e-02 -7.51524325e-03  7.79115688e-03 -6.59273788e-02\\n  1.71770044e-02 -8.23717564e-02  4.48772870e-02  9.75161418e-03\\n  2.06317510e-02 -4.10395786e-02  6.34796172e-02  4.74998839e-02\\n  1.65197868e-02  4.10233950e-03 -4.83053066e-02 -3.97724919e-02\\n  1.55909229e-02  9.20546148e-03  6.83017373e-02  1.77672412e-02\\n -3.58272158e-02 -4.00079601e-02  3.15070688e-03 -1.27595682e-02\\n  2.98510940e-07  4.58762310e-02  3.85091901e-02  3.00739352e-02\\n  1.83756594e-02  4.55376878e-02 -5.95038496e-02 -3.37453410e-02\\n -3.65168252e-03  9.64715146e-03 -1.56624876e-02  6.13953136e-02\\n -1.78610235e-02 -1.26262242e-03 -3.14926058e-02 -1.09366169e-02\\n -3.64832906e-03 -3.29604223e-02  3.33371051e-02  3.39063331e-02\\n -1.20994337e-02  1.35460985e-03 -1.02522899e-03 -2.38594245e-02\\n  5.57465106e-02 -4.52753739e-04  3.37089486e-02  1.27504654e-02\\n -1.64250825e-02  4.64745536e-02  2.41615772e-02 -7.10169822e-02\\n -3.54051292e-02  2.16903482e-02  5.10614887e-02 -1.21851051e-02\\n -3.67046520e-02 -8.42382107e-03 -3.82084362e-02  1.63634568e-02\\n  2.83161178e-02  1.26581523e-03 -1.35584017e-02  6.33636639e-02\\n  4.02051862e-03  2.39713043e-02  4.78704125e-02 -3.20870094e-02\\n  3.08425631e-02 -7.65970200e-02  4.59153280e-02  5.77726029e-02\\n  4.54867743e-02  3.97585854e-02 -2.46453341e-02 -4.12072539e-02\\n  3.28213200e-02  7.53993052e-04  1.10379718e-02  2.31852289e-02\\n  5.33935912e-02 -2.86136866e-02 -8.10650438e-02  1.27618425e-02\\n  2.40520276e-02  5.50267808e-02  1.37903271e-02 -4.73010205e-02\\n  2.60078630e-34 -2.06978694e-02  1.77477896e-02  4.17737663e-02\\n -6.30478710e-02 -2.42628288e-02  3.69987376e-02 -8.25612172e-02\\n -2.10641865e-02  4.90698516e-02  4.02811100e-04 -1.67914480e-02]\",\n          \"[ 1.45545248e-02  3.22869122e-02 -1.00467736e-02 -1.65619254e-02\\n -5.42403711e-03 -2.71249004e-02  5.10433391e-02  2.69365255e-02\\n -2.54066885e-02  5.66889765e-04  7.53997043e-02 -2.65138634e-02\\n -1.60954390e-02  7.08393306e-02  3.92227620e-02 -3.84965129e-02\\n  5.78069687e-02  4.68159467e-03 -3.23895402e-02 -1.50478901e-02\\n -8.16171095e-02 -1.03482800e-02 -6.44521043e-03  1.76057182e-02\\n  1.70056466e-02 -1.94042660e-02 -5.65762958e-03 -2.82545965e-02\\n  7.29383249e-03 -7.90712833e-02  1.10154524e-02 -4.84457146e-03\\n -3.03320494e-02  4.74082865e-02  2.33329956e-06 -8.63020644e-02\\n -3.99215259e-02 -1.06758846e-03 -4.73175310e-02  1.22879418e-02\\n  5.12889549e-02  1.57299247e-02 -1.47567159e-02 -1.07233850e-02\\n -2.41495948e-02  2.17768885e-02  5.85462935e-02  3.90854664e-02\\n -3.99543867e-02  5.43987863e-02 -9.87041625e-04 -4.25414108e-02\\n  1.93346534e-02 -3.44511196e-02 -2.03673262e-02 -1.36465172e-03\\n -9.39575431e-04  3.46187167e-02  9.10993014e-03  5.05587533e-02\\n -2.64159944e-02 -2.49472260e-02  3.81176509e-02 -2.50130687e-02\\n  2.00394485e-02  2.17855629e-02 -2.22866442e-02 -6.89036548e-02\\n  1.53930029e-02  4.84924726e-02  2.75590960e-02  9.18281265e-03\\n  3.44406907e-03  3.71079035e-02 -3.50396410e-02 -3.26548554e-02\\n -1.27763525e-02  1.76747830e-03  5.30709326e-03 -3.00272694e-03\\n  3.77719663e-02  3.85898277e-02  4.05664276e-03 -2.13841125e-02\\n -4.26499397e-02  1.18952334e-01  1.06182924e-04  1.06204662e-03\\n  2.57700589e-02 -7.26180896e-02  7.55666709e-03 -6.08232357e-02\\n  3.89863993e-03 -1.01817260e-02 -1.95875373e-02 -8.84656608e-03\\n  1.86248571e-02 -1.88294351e-02  5.22829518e-02 -8.04018006e-02\\n  5.26229888e-02 -1.68557372e-02  4.62829359e-02  5.36791459e-02\\n  2.65202858e-02  4.52096164e-02 -3.94824296e-02  5.97420102e-03\\n -6.85216039e-02  4.08939794e-02 -2.46488042e-02 -2.66370066e-02\\n -1.51058873e-02  4.05616388e-02  6.35752641e-03 -1.89347770e-02\\n -7.99410418e-02  3.88157889e-02  9.10391938e-03  3.36107193e-03\\n -1.56841911e-02  1.69477314e-02  2.85976287e-02  9.61687416e-03\\n -2.01326259e-03  1.69993192e-02 -8.56469870e-02 -2.91817281e-02\\n  2.51071737e-03 -3.27688381e-02  2.07260214e-02 -1.56695265e-02\\n -1.42858326e-02 -4.00327891e-02  3.06681599e-02  8.76869783e-02\\n  4.83598709e-02 -1.26904424e-03  4.91178818e-02 -4.42843698e-02\\n  1.50826257e-02 -4.55645062e-02  1.94614865e-02 -4.36702818e-02\\n -2.23605335e-02 -1.22186942e-02  7.23858969e-03 -1.80300530e-02\\n -8.59897863e-03 -3.10375821e-02 -2.37354357e-02  2.15384108e-03\\n -6.86947182e-02  2.35045049e-02 -2.04865052e-03  7.43875140e-03\\n  5.36505021e-02  1.63624045e-02 -1.24648325e-02  4.72620800e-02\\n  1.11552536e-01 -3.20574753e-02 -1.34454509e-02 -3.26614082e-02\\n  7.44760875e-03 -2.04932690e-02 -2.25872645e-04 -1.69024151e-02\\n -1.91602949e-02  1.29233766e-02 -4.36918102e-02  3.83280963e-02\\n -3.24828103e-02 -1.91092379e-02  3.11406311e-02  6.38373122e-02\\n  4.45579067e-02  4.98130545e-02 -1.77208073e-02  1.21279452e-02\\n  4.36717160e-02 -4.78635579e-02 -3.75131406e-02  3.32892016e-02\\n -1.69929694e-02  1.06022656e-02  2.14677677e-02  2.11840849e-02\\n -1.04587777e-02 -6.93764612e-02 -9.58108995e-03 -9.50291753e-03\\n -2.01918222e-02 -4.10796255e-02  3.21674682e-02 -2.29450688e-02\\n -2.46371794e-03 -2.06751395e-02  1.18388853e-03 -1.81103759e-02\\n -2.08498761e-02  7.95059372e-03  4.80185747e-02  6.87947497e-02\\n  9.49372444e-03 -3.02794725e-02 -2.10327357e-02  3.13694701e-02\\n -2.42794417e-02  6.09479249e-02  6.84391856e-02  7.66955921e-03\\n  1.44994818e-02 -1.40079642e-02  2.32429318e-02 -4.70233476e-03\\n  2.08183900e-02  9.96661745e-03 -5.50176911e-02  3.36457565e-02\\n -3.40300761e-02 -2.84626167e-02  1.19954988e-04 -3.08227120e-03\\n -2.11964361e-02 -3.47038098e-02 -3.19282264e-02 -1.80015694e-02\\n  1.68922395e-02  3.24170664e-02 -1.00689558e-02  2.76845973e-02\\n  1.35334851e-02  9.27225035e-03 -5.26011214e-02 -2.12597009e-02\\n  1.26567378e-03  7.84914047e-02  4.76147644e-02 -3.63875590e-02\\n  3.38349817e-03  8.90080184e-02  3.87300439e-02 -3.89298890e-03\\n  1.57628190e-02  1.41694928e-02  4.42450605e-02 -1.11756679e-02\\n  4.33024317e-02 -8.40591965e-04  7.24217519e-02  1.88064594e-02\\n  6.87061390e-03 -2.38924213e-02  4.85675707e-02 -2.03648675e-02\\n -6.86437711e-02  5.63962944e-02  7.46342354e-03 -3.19628119e-02\\n  3.69478166e-02 -3.76760066e-02 -8.05962190e-06  6.78595714e-03\\n  6.85645118e-02 -2.62062345e-02  2.29602251e-02 -7.39780962e-02\\n -3.85491848e-02  4.74110339e-03  3.44352238e-03  1.38550093e-02\\n -1.68520119e-02 -2.86229583e-03 -1.41970359e-03  3.33092199e-03\\n  2.72650737e-02  1.48137407e-02 -2.13099620e-03  2.29183380e-02\\n -1.77365541e-02 -5.55656478e-02 -3.83497067e-02 -4.11343463e-02\\n -2.38957480e-02  3.93372960e-02  1.24703832e-02 -2.77723260e-02\\n  2.07206346e-02  3.09636351e-02 -3.98536846e-02  2.72996705e-02\\n -1.95203051e-02 -5.21066636e-02  3.40758357e-03  2.64718961e-02\\n -5.23063205e-02  4.04515266e-02  3.17317881e-02  8.20101127e-02\\n  6.75174175e-03  7.30715692e-04  1.49478987e-02 -2.23047771e-02\\n -6.23861179e-02 -2.68472917e-03  1.16713615e-02  2.38066725e-02\\n  1.88005436e-02  5.28017059e-02 -2.19547376e-02 -1.12136099e-02\\n  1.76591706e-02  4.21300046e-02 -5.20479493e-02 -6.75105751e-02\\n -3.49142216e-02  8.43598973e-04 -1.81842409e-02  8.31074417e-02\\n  2.97956765e-02 -4.11387160e-03  2.28393767e-02  8.30453914e-03\\n  2.02589054e-02 -1.01799972e-03 -5.59906587e-02 -9.67551954e-03\\n  4.41020541e-02  1.44316154e-02  4.39014062e-02  1.77160273e-05\\n -1.88940782e-02 -8.03890638e-03  2.77552381e-02 -3.59462425e-02\\n -4.27286327e-02 -4.72805016e-02 -1.34299975e-02 -1.82707738e-02\\n -1.31555423e-02 -5.73140979e-02 -1.42141916e-02  2.00996418e-02\\n  5.04676402e-02  6.56198040e-02  1.58132333e-02 -3.00976373e-02\\n  2.56686728e-03  1.61534566e-02  2.91234674e-03  4.78858035e-03\\n -1.37181235e-02  5.43205487e-03 -1.02212289e-02 -8.79633240e-03\\n  1.57779604e-02  3.16418745e-02  3.62636638e-03  2.11510956e-02\\n  2.12268662e-02  1.54015692e-02 -2.00910773e-02  2.74221636e-02\\n  1.93388872e-02  5.10863848e-02  1.19314520e-02 -4.31635268e-02\\n -4.33127657e-02  4.20512864e-03  3.49932350e-02 -1.90701522e-02\\n -7.57420610e-04  5.95026389e-02  9.45552066e-03  1.68934651e-02\\n  5.49003780e-02 -4.38463315e-02 -6.34901002e-02  1.90611705e-02\\n  6.86937198e-03 -3.00903078e-02  5.83636165e-02 -4.95015234e-02\\n -2.91438084e-02 -2.21280325e-02 -5.46770580e-02 -1.13374018e-03\\n -6.27526566e-02 -3.43466513e-02  3.76959480e-02 -6.76593781e-02\\n -3.41126993e-02  6.37191860e-03 -2.47887224e-02 -3.64892259e-02\\n -2.35404223e-02  2.71199308e-02 -4.92789503e-03  6.33438490e-03\\n  1.57127008e-02 -2.50280602e-03 -2.07522269e-02  2.08954737e-02\\n -4.38445285e-02 -9.64348856e-03  4.98370901e-02  5.00084199e-02\\n -6.33775294e-02 -1.67274717e-02  2.76224483e-02  4.08507735e-02\\n  5.65857766e-03  2.39969175e-02  1.52708869e-02  3.27987224e-03\\n -1.29616819e-02 -2.96096858e-02 -3.53748202e-02 -2.70961970e-02\\n -1.13635859e-03 -1.01504968e-02  5.20439744e-02 -2.38477327e-02\\n -6.05492154e-03 -6.53115809e-02 -7.83375057e-04 -3.35023552e-02\\n -3.88859794e-03 -4.68662530e-02 -1.74492728e-02 -5.42751700e-02\\n -3.35158221e-02  4.74165892e-03 -5.29555716e-02 -4.65341546e-02\\n -1.67373903e-02 -3.27085219e-02 -6.99117482e-02 -7.12584630e-02\\n -4.19302173e-02 -5.84781461e-04  5.99372201e-02  2.78149601e-02\\n -8.36285297e-03  6.52301461e-02  5.89814270e-03 -4.87011410e-02\\n -6.46440387e-02  3.09299529e-02 -4.78374166e-03 -5.07263616e-02\\n -1.33623900e-02  1.35710025e-02  2.54212283e-02 -3.30451801e-02\\n -1.01124598e-02  6.32483661e-02 -3.31471786e-02  8.10513720e-02\\n  4.16988023e-02  5.30665927e-02 -8.60562772e-02  2.17637736e-02\\n -2.20811437e-03  3.42722535e-02  5.90179674e-02 -1.27580082e-02\\n  4.22836281e-02  4.65719588e-03  1.52137950e-02 -7.56635796e-03\\n -2.04767031e-03 -1.09109022e-02  4.16618958e-02 -6.31610826e-02\\n  2.03110911e-02 -7.34508708e-02  1.10395504e-02  4.38695550e-02\\n  3.38108055e-02  1.06740114e-03  1.25546874e-02  8.06584395e-03\\n  5.10897953e-03  1.07867713e-03 -3.03194150e-02 -9.94423870e-03\\n -2.09914260e-02  4.34506452e-03  3.73357870e-02  1.40522514e-02\\n -1.86446831e-02  2.87599880e-02  9.00382400e-02 -9.34019510e-04\\n  6.21892512e-02 -1.66539419e-02 -1.93630420e-02  5.78506850e-02\\n  7.90681038e-03  2.27964912e-02 -2.40859436e-03 -3.75009840e-03\\n -3.21874060e-02  2.15221979e-02  8.01318418e-03  2.35961564e-02\\n -3.14841024e-03 -1.47435190e-02 -4.61374782e-02  7.33617991e-02\\n -3.87022980e-02 -9.33729783e-02 -2.20693871e-02 -1.37291513e-02\\n  1.13047371e-02  3.20726482e-04 -2.13706270e-02 -6.39275089e-02\\n  8.56400188e-03 -3.44289513e-03 -1.14466306e-02 -1.87381133e-02\\n -4.57036495e-03  1.11776348e-02  2.97612343e-02  4.45928471e-03\\n -3.67966667e-02  4.94765714e-02 -1.21437721e-02 -2.69339047e-02\\n  3.21318582e-03  1.18134997e-03 -2.72012781e-02  3.24717127e-02\\n -3.46450992e-02  5.94869815e-02  3.25089879e-02  1.24526192e-02\\n -7.77296796e-02 -3.65994796e-02 -3.48264538e-03  6.52584210e-02\\n  3.81844565e-02  1.70175591e-03  2.40709931e-02  3.62372883e-02\\n  2.12200265e-02 -1.71888489e-02 -1.56669728e-02 -3.10333017e-02\\n -1.14678130e-01  3.74478847e-02  3.80989164e-02 -6.67137492e-33\\n -2.85906810e-02 -6.51204884e-02  4.49797633e-04  3.59677244e-03\\n -6.95421174e-02 -7.00409561e-02 -2.51719332e-03  2.56262980e-02\\n -5.13351746e-02 -2.16703117e-02 -1.00088194e-02  6.33989694e-04\\n  1.18412273e-02 -1.37341768e-02  5.72758131e-02  5.69000095e-02\\n  9.84549988e-04 -4.54537012e-03 -2.44547166e-02 -4.49407250e-02\\n  5.70420101e-02  4.76167683e-04  8.32341164e-02 -4.38087247e-02\\n  1.63054895e-02  3.60733308e-02  1.75040681e-02  2.73800530e-02\\n  6.50828052e-03  3.68630104e-02 -8.91014934e-03  2.90102437e-02\\n  1.36406589e-02 -3.74491401e-02  6.79844664e-03 -2.31252145e-02\\n -1.80225186e-02 -8.64149332e-02  5.46269678e-03 -2.26868205e-02\\n -3.60609442e-02 -4.27051373e-02 -1.75296739e-02 -1.32152461e-03\\n -3.28227207e-02 -3.65351140e-03  3.54380161e-02 -1.97972823e-02\\n -1.83700677e-02 -3.07974219e-02 -2.45519131e-02  1.38327172e-02\\n  7.54511729e-03  8.24138075e-02 -5.36382534e-02 -1.47014521e-02\\n -2.33193710e-02 -4.14240286e-02 -3.37427557e-02  6.13964163e-02\\n  5.42762168e-02  8.09803158e-02  6.85651368e-03 -4.86059189e-02\\n  2.81809196e-02  3.34129222e-02  6.19456954e-02  6.60527218e-03\\n -2.28537694e-02 -1.70249995e-02 -6.61766506e-04  1.18466489e-01\\n  5.49608581e-02  8.68035294e-03  3.26711498e-02 -4.67001200e-02\\n -1.62620971e-04  6.64528739e-03  4.71060872e-02  3.48951295e-02\\n  2.16477364e-02  2.25234963e-02 -1.98521018e-02 -6.96772337e-03\\n  2.23113969e-02 -3.67733389e-02 -1.18138418e-02 -4.97450419e-02\\n  4.79818210e-02 -3.99457198e-03  3.84773351e-02 -1.04271155e-03\\n -1.21359443e-02 -6.05151728e-02  1.27076795e-02  3.61737870e-02\\n  1.94278527e-02  9.37908515e-03 -1.06890118e-02 -4.56353016e-02\\n -3.06013990e-02 -1.95137653e-02 -3.47859785e-02  6.42992090e-03\\n  4.05859277e-02  1.56539343e-02 -7.26289824e-02  4.15215716e-02\\n -3.82939912e-02  9.50623653e-04  1.86707787e-02 -6.77719414e-02\\n  6.41475692e-02 -2.75420547e-02  6.88934699e-04 -5.40875569e-02\\n  1.75065398e-02 -8.95286631e-03  1.88226830e-02 -2.10747514e-02\\n -3.91385965e-02  3.86007242e-02  3.75827076e-03  2.11604554e-02\\n -2.16277838e-02 -2.90870108e-03 -6.51082471e-02  7.05801472e-02\\n  6.12997338e-02 -3.65055725e-02 -2.94818804e-02  4.16408144e-02\\n  3.06877268e-07 -1.63319241e-02  7.29001313e-02  2.57968586e-02\\n  1.96879152e-02  1.36410315e-02  2.58728825e-02 -1.52350217e-02\\n  9.45200957e-03 -5.74438162e-02 -9.86393634e-03  5.37059121e-02\\n -5.44007495e-02 -1.00771030e-02  2.77205016e-02 -5.26316687e-02\\n -4.59603220e-02  7.80388713e-03 -1.45545332e-02 -3.57808061e-02\\n -6.23973599e-03  4.37864065e-02  6.12966120e-02  6.12664372e-02\\n  1.54892169e-02 -1.44080799e-02 -5.26362732e-02 -2.55764313e-02\\n -6.57518730e-02  3.33930105e-02  1.27405049e-02 -7.62270391e-03\\n -2.02962290e-02 -1.47188930e-02 -3.16645950e-02  2.03910880e-02\\n  2.03601420e-02  5.67910224e-02  5.76250665e-02 -4.92418185e-03\\n  1.41833043e-02  3.65356938e-03 -9.32364240e-02 -1.49347959e-03\\n -7.47059360e-02 -4.30421112e-03  7.51931593e-03 -6.97586313e-02\\n  1.55549757e-02 -1.93927754e-02  3.21210315e-03  3.27340849e-02\\n  1.02983033e-02 -8.11435562e-03 -4.55959234e-03 -3.59434076e-03\\n  8.97347555e-03  2.77871005e-02 -2.15099826e-02  4.63029258e-02\\n  5.33589572e-02 -2.16146857e-02 -9.67517048e-02  3.04772309e-03\\n  7.13528618e-02  6.54674321e-02 -2.06775125e-03 -3.14563960e-02\\n  2.95399733e-34  2.98340283e-02 -3.08944192e-02  2.68096961e-02\\n -9.28707235e-03 -1.89668089e-02 -2.03396892e-03 -1.58504434e-02\\n -7.15836242e-04 -5.88889653e-03 -4.63790223e-02 -4.73585352e-02]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "If your embedding database is really large (e.g. over 100k - 1M samples) you might want to look into vector database for storage"
      ],
      "metadata": {
        "id": "ztjg114RauZ2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# RAG - Search and Answer"
      ],
      "metadata": {
        "id": "z-b4MomxaxhG"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Rag Goal: Retrieve relevent passages based on a query and use those passages to augment an input to an LLM so it can generate an output based on those relevant passages."
      ],
      "metadata": {
        "id": "CxmsT6Kba5G3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Similarity Search\n",
        "Embeddings can be used for almost any type of data.\n",
        "\n",
        "for example, you can turn images into embeddings, sound into embeddings, sount into embeddings, text into embeddings, etc .....\n",
        "\n",
        "Comparing embeddings is known as similarity search, vector search, semantic search.\n",
        "\n",
        "In our case, we want to query our \"AI advantages\" I should get relevant passes to that text but may not contain exactly the words \"AI Advantange\".\n",
        "\n",
        "Whereas with keyword search, if I search \"apple\" I get back passages with specifically \"apple\"."
      ],
      "metadata": {
        "id": "oVPg4zKLa-hv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "import torch\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
        "print(device)\n",
        "\n",
        "#Import texts and embedding df\n",
        "text_chunks_and_embedding_df = pd.read_csv(path)\n",
        "\n",
        "# Convert embedding column back to np.array ( it got saved to string when it is saved to csv )\n",
        "text_chunks_and_embedding_df[\"embedding\"] = text_chunks_and_embedding_df[\"embedding\"].apply(lambda x:np.fromstring(x.strip(\"[]\"), sep=\" \"))\n",
        "\n",
        "#Convert our embeddings into a toerch.tensor\n",
        "embeddings = torch.tensor(np.stack(text_chunks_and_embedding_df[\"embedding\"].tolist(), axis=0), dtype=torch.float32).to(device)\n",
        "\n",
        "#Convert texts and embedding df to list of dicts\n",
        "pages_and_chunk = text_chunks_and_embedding_df.to_dict(orient=\"records\")\n",
        "\n",
        "text_chunks_and_embedding_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 615
        },
        "id": "kjYz2UWWapgT",
        "outputId": "3c7d8b80-c1ba-458c-801e-8e07085ffbc2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cuda\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      page_number                                     sentence_chunk  \\\n",
              "0             -20  PRENTICE HALL SERIES IN ARTIFICIAL INTELLIGENC...   \n",
              "1             -19  Artiﬁcial Intelligence A Modern Approach Third...   \n",
              "2             -18  Vice President and Editorial Director, ECS: Ma...   \n",
              "3             -15  Preface Artiﬁcial Intelligence (AI) is a big ﬁ...   \n",
              "4             -15  Most important from our point of view is the c...   \n",
              "...           ...                                                ...   \n",
              "3643         1124  1128 Index Sulawesi, 223 SUMMATION, 1053 summe...   \n",
              "3644         1125  Index 1129 Thrun, S., 28, 605, 686, 884, 1012–...   \n",
              "3645         1126  1130 Index unit (in a neural network), 728 uni...   \n",
              "3646         1127  Index 1131 Voronoi graph, 991 Vossen, T., 396,...   \n",
              "3647         1128  1132 Index Wu, E., 885, 1067 Wu, F., 469, 1092...   \n",
              "\n",
              "      chunk_char_count  chunk_word_count  chunk_token_count  \\\n",
              "0                  327                47              81.75   \n",
              "1                  420                61             105.00   \n",
              "2                 2130               308             532.50   \n",
              "3                 1245               198             311.25   \n",
              "4                 1646               258             411.50   \n",
              "...                ...               ...                ...   \n",
              "3643              3801               620             950.25   \n",
              "3644              3715               588             928.75   \n",
              "3645              3842               631             960.50   \n",
              "3646              4003               719            1000.75   \n",
              "3647              1807               340             451.75   \n",
              "\n",
              "                                              embedding  \n",
              "0     [-0.0130461548, 0.0268112104, -0.0413668528, -...  \n",
              "1     [0.00509229582, 0.0546925478, -0.0623469651, 0...  \n",
              "2     [0.0517049171, 0.03893435, -0.0246169083, -0.0...  \n",
              "3     [0.0305054262, 0.0173628889, -0.0483833812, -0...  \n",
              "4     [0.0290427636, 0.00753119681, -0.00385300419, ...  \n",
              "...                                                 ...  \n",
              "3643  [-0.0216913726, -0.0157258194, -0.0309953503, ...  \n",
              "3644  [-0.00437530549, -0.046816051, -0.050273262, 0...  \n",
              "3645  [0.0145545248, 0.0322869122, -0.0100467736, -0...  \n",
              "3646  [-0.0571542569, -0.00714794127, -0.0141823478,...  \n",
              "3647  [0.0240677409, -0.10334526, 0.01313366, 0.0039...  \n",
              "\n",
              "[3648 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b3382dab-52f2-41ce-b648-8139994173f0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>page_number</th>\n",
              "      <th>sentence_chunk</th>\n",
              "      <th>chunk_char_count</th>\n",
              "      <th>chunk_word_count</th>\n",
              "      <th>chunk_token_count</th>\n",
              "      <th>embedding</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-20</td>\n",
              "      <td>PRENTICE HALL SERIES IN ARTIFICIAL INTELLIGENC...</td>\n",
              "      <td>327</td>\n",
              "      <td>47</td>\n",
              "      <td>81.75</td>\n",
              "      <td>[-0.0130461548, 0.0268112104, -0.0413668528, -...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-19</td>\n",
              "      <td>Artiﬁcial Intelligence A Modern Approach Third...</td>\n",
              "      <td>420</td>\n",
              "      <td>61</td>\n",
              "      <td>105.00</td>\n",
              "      <td>[0.00509229582, 0.0546925478, -0.0623469651, 0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-18</td>\n",
              "      <td>Vice President and Editorial Director, ECS: Ma...</td>\n",
              "      <td>2130</td>\n",
              "      <td>308</td>\n",
              "      <td>532.50</td>\n",
              "      <td>[0.0517049171, 0.03893435, -0.0246169083, -0.0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-15</td>\n",
              "      <td>Preface Artiﬁcial Intelligence (AI) is a big ﬁ...</td>\n",
              "      <td>1245</td>\n",
              "      <td>198</td>\n",
              "      <td>311.25</td>\n",
              "      <td>[0.0305054262, 0.0173628889, -0.0483833812, -0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-15</td>\n",
              "      <td>Most important from our point of view is the c...</td>\n",
              "      <td>1646</td>\n",
              "      <td>258</td>\n",
              "      <td>411.50</td>\n",
              "      <td>[0.0290427636, 0.00753119681, -0.00385300419, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3643</th>\n",
              "      <td>1124</td>\n",
              "      <td>1128 Index Sulawesi, 223 SUMMATION, 1053 summe...</td>\n",
              "      <td>3801</td>\n",
              "      <td>620</td>\n",
              "      <td>950.25</td>\n",
              "      <td>[-0.0216913726, -0.0157258194, -0.0309953503, ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3644</th>\n",
              "      <td>1125</td>\n",
              "      <td>Index 1129 Thrun, S., 28, 605, 686, 884, 1012–...</td>\n",
              "      <td>3715</td>\n",
              "      <td>588</td>\n",
              "      <td>928.75</td>\n",
              "      <td>[-0.00437530549, -0.046816051, -0.050273262, 0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3645</th>\n",
              "      <td>1126</td>\n",
              "      <td>1130 Index unit (in a neural network), 728 uni...</td>\n",
              "      <td>3842</td>\n",
              "      <td>631</td>\n",
              "      <td>960.50</td>\n",
              "      <td>[0.0145545248, 0.0322869122, -0.0100467736, -0...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3646</th>\n",
              "      <td>1127</td>\n",
              "      <td>Index 1131 Voronoi graph, 991 Vossen, T., 396,...</td>\n",
              "      <td>4003</td>\n",
              "      <td>719</td>\n",
              "      <td>1000.75</td>\n",
              "      <td>[-0.0571542569, -0.00714794127, -0.0141823478,...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3647</th>\n",
              "      <td>1128</td>\n",
              "      <td>1132 Index Wu, E., 885, 1067 Wu, F., 469, 1092...</td>\n",
              "      <td>1807</td>\n",
              "      <td>340</td>\n",
              "      <td>451.75</td>\n",
              "      <td>[0.0240677409, -0.10334526, 0.01313366, 0.0039...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>3648 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b3382dab-52f2-41ce-b648-8139994173f0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b3382dab-52f2-41ce-b648-8139994173f0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b3382dab-52f2-41ce-b648-8139994173f0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-312197f4-87cf-48b6-a9b1-646029f7e57a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-312197f4-87cf-48b6-a9b1-646029f7e57a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-312197f4-87cf-48b6-a9b1-646029f7e57a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_ccea20bc-1c91-459c-966f-1e1d4f2c74e4\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('text_chunks_and_embedding_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ccea20bc-1c91-459c-966f-1e1d4f2c74e4 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('text_chunks_and_embedding_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "text_chunks_and_embedding_df",
              "summary": "{\n  \"name\": \"text_chunks_and_embedding_df\",\n  \"rows\": 3648,\n  \"fields\": [\n    {\n      \"column\": \"page_number\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 356,\n        \"min\": -20,\n        \"max\": 1128,\n        \"num_unique_values\": 1146,\n        \"samples\": [\n          200,\n          791,\n          483\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sentence_chunk\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3648,\n        \"samples\": [\n          \"The full joint probability distribution speci\\ufb01es the probability of each complete as- signment of values to random variables. It is usually too large to create or use in its explicit form, but when it is available it can be used to answer queries simply by adding up entries for the possible worlds corresponding to the query propositions. \\u2022Absolute independence between subsets of random variables allows the full joint dis- tribution to be factored into smaller joint distributions, greatly reducing its complexity. Absolute independence seldom occurs in practice. \\u2022Bayes\\u2019 rule allows unknown probabilities to be computed from known conditional probabilities, usually in the causal direction. Applying Bayes\\u2019 rule with many pieces of evidence runs into the same scaling problems as does the full joint distribution. \\u2022Conditional independence brought about by direct causal relationships in the domain might allow the full joint distribution to be factored into smaller, conditional distri- butions. The naive Bayes model assumes the conditional independence of all effect variables, given a single cause variable, and grows linearly with the number of effects. \\u2022A wumpus-world agent can calculate probabilities for unobserved aspects of the world, thereby improving on the decisions of a purely logical agent. Conditional independence makes these calculations tractable.\",\n          \"Correlation and causation. J. Agricultural Research, 20, 557\\u2013585. Wright, S. (1931). Evolution in Mendelian popula- tions. Genetics, 16, 97\\u2013159. Wright, S. (1934). The method of path coef\\ufb01cients. Annals of Mathematical Statistics, 5, 161\\u2013215. Wu, D. (1993). Estimating probability distributions over hypotheses with variable uni\\ufb01cation.\",\n          \"1130 Index unit (in a neural network), 728 unit clause, 253, 260, 355 United States, 13, 629, 640, 753, 755, 922, 1034, 1036 unit preference, 355 unit preference strategy, 355 unit propagation, 261 unit resolution, 252, 355 units function, 444 universal grammar, 921 Universal Instantiation, 323 universal plan, 434 unmanned air vehicle (UAV), 971 unmanned ground vehicle (UGV), 971 UNPOP, 394 unrolling, 544, 595 unsatis\\ufb01ability, 274 unsupervised learning, 694, 817\\u2013820, 1025 UOSAT-II, 432 update, 142 upper ontology, 467 URL, 463 Urmson, C., 1014, 1091 urn-and-ball, 803 URP, 638 Uskov, A. V., 192, 1064 Utgoff, P. E., 776, 799, 1082 utilitarianism, 7 utility, 9, 53, 162, 482 axioms of, 613 estimation, 833 expected, 53, 61, 483, 610, 611, 616 function, 53, 54, 162, 611, 615\\u2013621, 846 independence, 626 maximum expected, 483, 611 of money, 616\\u2013618 multiattribute, 622\\u2013626, 636, 648 multiplicative, 626 node, 627 normalized, 615 ordinal, 614 theory, 482, 611\\u2013615, 636 utility-based agent, 1044 utopia, 1052 UWL, 433 V vacuum tube, 16 vacuum world, 35, 37, 62, 159 erratic, 134 slippery, 137 vagueness, 547 Valiant, L., 759, 1091 validation cross, 737, 759, 767 validation, cross, 708 validation set, 709 validity, 249, 274 value, 58 VALUE-ITERATION, 653 value determination, 691 value function, 614 additive, 625 value iteration, 652, 652\\u2013656, 684 point-based, 686 value node, see utility node value of computation, 1048 value of information, 628\\u2013633, 636, 644, 659, 839, 1025, 1048 value of perfect information, 630 value symmetry, 226 VAMPIRE, 359, 360 van Beek, P., 228\\u2013230, 395, 470, 1065, 1078, 1087, 1091 van Bentham, J., 314, 1091 Vandenberghe, L., 155, 1066 van Harmelen, F., 473, 799, 1091 van Heijenoort, J., 360, 1091 van Hoeve, W.-J., 212, 228, 1091 vanishing point, 931 van Lambalgen, M., 470, 1091 van Maaren, H., 278, 1066 van Nunen, J. A. E. E., 685, 1091 van Run, P., 230, 1065 van der Gaag, L., 505, 1081 Van Emden, M. H., 472, 1091 Van Hentenryck, P., 228, 1091 Van Roy, B., 847, 855, 1090, 1091 Van Roy, P. L., 339, 342, 359, 1091 Vapnik, V. N., 759, 760, 762, 763, 967, 1066, 1069, 1080, 1091 Varaiya, P., 60, 856, 1072, 1079 Vardi, M. Y., 470, 477, 1072 variabilization (in EBL), 781 variable, 58 atemporal, 266 elimination, 524, 524\\u2013528, 552, 553, 596 in continuous state space, 131 indicator, 819 logic, 340 in logic, 295 ordering, 216, 527 random, 486, 515 Boolean, 486 continuous, 487, 519, 553 relevance, 528 Varian, H. R., 688, 759, 1081, 1091 variational approximation, 554 variational parameter, 554 Varzi, A., 470, 1068 Vaucanson, J., 1011 Vauquois, B., 909, 1091 Vazirani, U., 154, 763, 1064, 1078 Vazirani, V., 688, 1084 VC dimension, 759 VCG, 683 Vecchi, M. P., 155, 229, 1078 vector, 1055 vector \\ufb01eld histograms, 1013 vector space model, 884 vehicle interface layer, 1006 Veloso, M., 799, 1091 Vempala, S., 883, 1084 Venkataraman, S., 686, 1074 Venugopal, A., 922, 1093 Vere, S. A., 431, 1091 veri\\ufb01cation, 356 hardware, 312 Verma, T., 553, 826, 1073, 1085 Verma, V., 605, 1091 Verri, A., 968, 1090 VERSION-SPACE-LEARNING, 773 VERSION-SPACE-UPDATE, 773 version space, 773, 774, 798 version space collapse, 776 Vetterling, W. T., 155, 1086 Vickrey, W., 681 Vickrey-Clarke-Groves, 683 Vienna, 1028 views, multiple, 948 Vinge, V., 12, 1038, 1091 Viola, P., 968, 1025, 1091 virtual counts, 812 visibility graph, 1013 vision, 3, 12, 20, 228, 929\\u2013965 Visser, U., 195, 1014, 1091 Visser, W., 356, 1075 Vitali set, 489 Vitanyi, P. M. B., 759, 1080 Viterbi, A. J., 604, 1091 Viterbi algorithm, 578 Vlassis, N., 435, 686, 1089, 1091 VLSI layout, 74, 110, 125 vocabulary, 864 Volk, K., 826, 1074 von Mises, R., 504, 1091 von Neumann, J., 9, 15, 17, 190, 613, 637, 687, 1091 von Stengel, B., 677, 687, 1078 von Winterfeldt, D., 637, 1091 von Kempelen, W., 190 von Linne, C., 469 Voronkov, A., 314, 359, 360, 1086, 1087\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chunk_char_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 543,\n        \"min\": 121,\n        \"max\": 4094,\n        \"num_unique_values\": 1458,\n        \"samples\": [\n          263,\n          1627,\n          1167\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chunk_word_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 92,\n        \"min\": 17,\n        \"max\": 719,\n        \"num_unique_values\": 371,\n        \"samples\": [\n          309,\n          316,\n          151\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chunk_token_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 135.94964189224214,\n        \"min\": 30.25,\n        \"max\": 1023.5,\n        \"num_unique_values\": 1458,\n        \"samples\": [\n          65.75,\n          406.75,\n          291.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"embedding\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "embeddings.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0OZjLZX1a3J0",
        "outputId": "7c96aed6-4abf-42aa-d8e2-0e073e8ecb80"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "torch.Size([3648, 768])"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create model\n",
        "from sentence_transformers import util, SentenceTransformer\n",
        "\n",
        "embedding_model = SentenceTransformer(model_name_or_path=\"all-mpnet-base-v2\", device=device)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YE_fRNTTbPeM",
        "outputId": "d89f726c-a9a3-4221-e360-3618256ea480"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_token.py:89: UserWarning: \n",
            "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
            "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
            "You will be able to reuse this secret in all of your notebooks.\n",
            "Please note that authentication is recommended but still optional to access public models or datasets.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/huggingface_hub/file_download.py:1150: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/huggingface_hub/file_download.py:1150: FutureWarning: `resume_download` is deprecated and will be removed in version 1.0.0. Downloads always resume when possible. If you want to force a new download, use `force_download=True`.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Embedding model ready\n",
        "\n",
        "Let's create a small semantic search pipeline.\n",
        "\n",
        "In essence, we want to search for a query (e.g. \"AI Advantage\") and get back relevant passages from out textbook pdf.\n",
        "\n",
        "We can do so with the following steps:\n",
        "1. Define a query string.\n",
        "2. Turn the query string into embedding.\n",
        "3. Perform a dot product or cosine similarity function between text embeddings and the query embedding.\n",
        "4. Sort the results in the descending order\n",
        "\n",
        "Note: to use dot product for comaprision, ensure vector sizes are of same shape(e.g. 768) and tensors/vectors are in the same datatype (e.\n",
        "g. both are in torch.float32).\n"
      ],
      "metadata": {
        "id": "T2sE96F6cLyY"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 1. Define the query"
      ],
      "metadata": {
        "id": "VjooFigzcPRh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "query = \"What is Nearest Neighbour Search?\"\n",
        "print(f\"Query: {query}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S2AKxZT-bSTE",
        "outputId": "49d8158b-18b2-4b95-b5bd-7783b9266cf0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Query: What is Nearest Neighbour Search?\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 2. Embed the query\n",
        "Note: It's important to  embed your query with the same model you embedding your passages"
      ],
      "metadata": {
        "id": "Lsei4G_HcZou"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "query_embedding = embedding_model.encode(query, convert_to_tensor=True).to(\"cuda\")"
      ],
      "metadata": {
        "id": "NmoTmlTycTIq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 3. Get Similarity Scores with the dot product (use cosing similarity if outputs of model aren't normalized)"
      ],
      "metadata": {
        "id": "fFnBVVK3cgHn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from time import perf_counter as timer\n",
        "\n",
        "start_time = timer()\n",
        "dot_scores = util.dot_score(a=query_embedding, b=embeddings)[0]\n",
        "end_time = timer()\n",
        "\n",
        "print(f\"[INFO] Time taken to get scores om {len(embeddings)} embeddings: {end_time-start_time:.5f} seconds.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dz-bIWrice3O",
        "outputId": "46a290be-1d2b-4044-d1dd-51dc0b40797a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[INFO] Time taken to get scores om 3648 embeddings: 0.01201 seconds.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 4. Get the top k results(we'll keep top 5)"
      ],
      "metadata": {
        "id": "hpZLJUEJcl-G"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%time\n",
        "top_results_dot_product = torch.topk(dot_scores, k=5)\n",
        "top_results_dot_product"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qfAawLwtccdW",
        "outputId": "bee5ffa9-c69f-40e2-a806-d85b2023e583"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 40.5 ms, sys: 17.5 ms, total: 58 ms\n",
            "Wall time: 129 ms\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "torch.return_types.topk(\n",
              "values=tensor([0.5848, 0.5790, 0.5743, 0.5611, 0.5552], device='cuda:0'),\n",
              "indices=tensor([2026, 2035, 2034, 2032, 2030], device='cuda:0'))"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pages_and_chunk[2603]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DtjyOj4Sc8EO",
        "outputId": "472deb70-c7f0-4811-c1d4-1764c2449a4e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'page_number': 948,\n",
              " 'sentence_chunk': '952 Chapter 24. Perception (a) (b) Figure 24.19 (a) Three-dimensional reconstruction of the locations of the image features in Figure 24.18, shown from above. (b) The real house, taken from the same position.1. Differences in the distances of the texels from the camera. Distant objects appear smaller by a scaling factor of 1/Z. 2. Differences in the foreshortening of the texels. If all the texels are in the ground plane then distance ones are viewed at an angle that is farther off the perpendicular, and so are more foreshortened. The magnitude of the foreshortening effect is proportional to cos σ, where σ is the slant, the angle between the Z-axis and n, the surface normal to the texel. Researchers have developed various algorithms that try to exploit the variation in the appearance of the projected texels as a basis for determining surface normals.',\n",
              " 'chunk_char_count': 861,\n",
              " 'chunk_word_count': 143,\n",
              " 'chunk_token_count': 215.25,\n",
              " 'embedding': array([-2.32880972e-02, -6.66658729e-02, -3.94409243e-03,  4.09712233e-02,\n",
              "        -8.16958100e-02,  1.33132422e-02,  2.94061862e-02,  2.25935429e-02,\n",
              "        -4.25537713e-02,  3.03107360e-03, -4.36972547e-03,  2.56211907e-02,\n",
              "         1.00458823e-01, -7.74016930e-03,  3.75534929e-02, -8.50351676e-02,\n",
              "        -5.82066812e-02, -5.48814703e-03, -2.68896818e-02, -4.61833961e-02,\n",
              "        -4.73415628e-02, -2.56794374e-02,  7.67737953e-03, -2.76575461e-02,\n",
              "        -4.62715216e-02, -2.35979501e-02, -2.03582235e-02, -1.25741223e-02,\n",
              "         3.16455349e-04,  1.32893920e-02, -3.30455527e-02, -1.41370227e-03,\n",
              "         4.59074341e-02, -3.89183201e-02,  2.05987362e-06, -7.35254735e-02,\n",
              "        -2.69247070e-02,  1.83866490e-02,  1.05049409e-01,  1.77170690e-02,\n",
              "         6.55328780e-02, -7.36205839e-03, -3.95864993e-03, -2.67802030e-02,\n",
              "        -4.07445095e-02, -4.30461252e-03,  2.29573809e-02,  8.64689872e-02,\n",
              "        -9.18853655e-02, -1.12793623e-02, -4.11734777e-03, -7.28145093e-02,\n",
              "        -5.78097999e-02,  2.63305232e-02,  7.02853352e-02,  4.40393463e-02,\n",
              "        -6.55192882e-03,  1.07181128e-02, -6.39127642e-02,  4.49220873e-02,\n",
              "        -3.26152146e-02,  1.48542617e-02,  3.09594367e-02,  3.44520658e-02,\n",
              "         6.44219443e-02,  2.50369757e-02,  6.12015687e-02, -5.76820178e-03,\n",
              "        -5.20789810e-02,  5.64411329e-03, -3.88453417e-02,  1.07887900e-03,\n",
              "         9.02631509e-05,  3.04262037e-03, -1.69927105e-02,  3.04497108e-02,\n",
              "        -6.17900398e-03,  2.41946280e-02, -1.74303185e-02, -4.18668687e-02,\n",
              "        -7.09088370e-02, -8.60893540e-03,  1.56045016e-02, -6.74298480e-02,\n",
              "        -1.67496614e-02, -6.46110578e-03,  5.48919626e-02,  1.10152941e-02,\n",
              "        -5.66687845e-02, -8.69433302e-03, -4.27221367e-03, -3.17948274e-02,\n",
              "         3.21913622e-02,  1.04265485e-03, -1.50701089e-03,  3.76743451e-03,\n",
              "         6.44389614e-02, -2.91512604e-03,  7.06688408e-03, -3.56415398e-02,\n",
              "         3.80607285e-02,  3.75537425e-02, -2.45048050e-02,  4.98049781e-02,\n",
              "        -4.72847670e-02,  7.73861036e-02, -4.48068306e-02,  1.72186606e-02,\n",
              "        -7.10388124e-02,  3.47737521e-02,  3.71991768e-02, -7.94150308e-03,\n",
              "        -3.90244871e-02, -2.85993479e-02, -3.65750939e-02,  3.01815048e-02,\n",
              "         3.20492778e-03, -4.42721695e-02,  2.09489428e-02, -6.74401585e-04,\n",
              "         2.95438524e-02,  5.02377711e-02,  2.79577225e-02, -3.34174708e-02,\n",
              "         1.18082827e-02, -1.02351839e-02, -4.85086218e-02,  4.52762768e-02,\n",
              "        -4.24737707e-02,  2.24052067e-03,  4.09116521e-02, -1.40305161e-02,\n",
              "         1.24604814e-02,  1.52392210e-02,  9.53022856e-03,  3.95670645e-02,\n",
              "         2.45873779e-02,  7.56394025e-03,  3.11270007e-03,  1.74993798e-02,\n",
              "        -1.02843847e-02,  2.24613585e-02,  2.02220008e-02, -1.80060025e-02,\n",
              "        -2.29321811e-02,  3.41380648e-02, -1.36584407e-02, -3.64862103e-03,\n",
              "        -9.52404086e-03, -3.68911810e-02,  6.43692492e-03,  4.38806377e-02,\n",
              "        -4.99222763e-02, -2.20751599e-03,  6.72070682e-02, -1.28720868e-02,\n",
              "        -5.99675961e-02, -2.49482356e-02, -7.28984131e-03,  1.74872745e-02,\n",
              "         2.86150072e-03, -3.26625742e-02,  6.95916871e-03, -1.16770165e-02,\n",
              "        -4.47008796e-02,  3.12759611e-03, -6.94099739e-02,  1.18036233e-02,\n",
              "         2.87430529e-02, -2.23548859e-02, -9.07706376e-03,  2.83970255e-02,\n",
              "         4.89125066e-02, -8.49742629e-03,  5.57957850e-02,  4.92048338e-02,\n",
              "        -4.64193672e-02, -2.40172669e-02,  2.88237794e-03,  3.64192314e-02,\n",
              "         9.93001647e-03,  1.40415607e-02,  1.67690571e-02, -6.42807828e-03,\n",
              "        -2.58461367e-02, -2.80715674e-02, -6.07612021e-02,  1.29567562e-02,\n",
              "        -4.00845930e-02, -5.70219010e-02, -3.38104591e-02, -5.12311682e-02,\n",
              "        -1.37773724e-02, -2.39358358e-02,  1.45814577e-02,  3.80682503e-03,\n",
              "         1.51980175e-02, -7.60451183e-02,  9.95401666e-03,  1.05366705e-03,\n",
              "        -2.08811127e-02,  7.62220798e-03,  4.00504796e-03, -2.89497767e-02,\n",
              "        -8.69594887e-03, -3.39738280e-02,  4.42382991e-02, -4.52354271e-03,\n",
              "        -6.75999746e-02,  2.65011936e-02,  2.95776371e-02, -8.48281197e-04,\n",
              "         3.96765172e-02,  3.33786421e-02, -5.11038788e-02,  3.07583176e-02,\n",
              "         4.61418517e-02,  2.05299091e-02, -6.42431602e-02,  9.21857730e-03,\n",
              "         2.94750612e-02, -6.13292083e-02,  5.60073368e-02,  1.75543055e-02,\n",
              "        -6.94558723e-03,  2.60641817e-02, -2.55484059e-02, -6.91489782e-03,\n",
              "        -5.16604818e-02,  2.27894299e-02,  5.44359013e-02, -7.70280091e-03,\n",
              "         1.78889371e-02,  1.37603813e-04,  8.19335598e-03,  3.43553387e-02,\n",
              "         1.24467276e-02,  4.33465391e-02,  4.60624620e-02, -1.00732721e-01,\n",
              "         2.95822062e-02,  2.81431302e-02, -1.33867245e-02, -3.76036856e-03,\n",
              "         2.06744410e-02, -2.45298631e-02,  3.40642706e-02, -2.59884610e-03,\n",
              "         2.38120891e-02, -3.47394980e-02, -9.77055728e-03, -1.92689896e-02,\n",
              "         2.74834018e-02, -3.04519180e-02,  4.22720984e-02,  1.34211564e-02,\n",
              "        -4.70703915e-02,  1.79061517e-02,  2.30208319e-03,  6.12518936e-02,\n",
              "        -1.41052902e-02, -3.27944346e-02,  2.02285871e-02,  2.63859127e-02,\n",
              "         4.96307537e-02, -2.22442616e-02,  6.59278780e-02,  5.40641844e-02,\n",
              "        -6.98092356e-02, -3.23717576e-03, -1.96926855e-02,  4.30536717e-02,\n",
              "        -4.13387641e-02,  1.26941288e-02, -2.38089561e-02,  4.25795615e-02,\n",
              "         4.49707173e-02, -1.09932793e-03, -3.21350284e-02,  2.73438431e-02,\n",
              "        -3.95979919e-02, -5.77138253e-02, -4.26734388e-02, -1.64995175e-02,\n",
              "         5.16349031e-03,  2.22299546e-02,  5.13633341e-02, -7.51823187e-02,\n",
              "        -2.15603486e-02, -1.33065628e-02, -2.57342635e-03,  2.10735248e-03,\n",
              "        -1.33740436e-03, -4.65292409e-02, -1.66450497e-02, -2.33644675e-02,\n",
              "         4.20999341e-02,  3.48765962e-02,  5.50591061e-03, -2.04892345e-02,\n",
              "        -7.43736979e-03,  5.40410690e-02, -3.03182695e-02, -3.93926864e-03,\n",
              "        -1.46487048e-02,  5.86274341e-02, -2.29579420e-03, -4.21805419e-02,\n",
              "         3.97434235e-02, -1.14006910e-03,  2.59504607e-03,  3.82993417e-03,\n",
              "        -1.72090996e-02,  7.84678236e-02, -2.91267876e-02, -2.99863573e-02,\n",
              "        -1.54041164e-02,  2.21486706e-02, -1.61370393e-02,  2.05255169e-02,\n",
              "        -9.63315088e-03,  1.94279533e-02, -7.84382001e-02, -3.53969671e-02,\n",
              "        -2.02676514e-03, -1.33233424e-02,  5.73193729e-02,  4.94717620e-02,\n",
              "        -3.51906419e-02,  3.98756191e-02,  1.17591452e-02, -1.76175199e-02,\n",
              "         2.95652659e-03,  2.42452114e-03, -3.10938768e-02,  1.09651368e-02,\n",
              "         1.78739533e-03, -5.76771386e-02, -6.44748881e-02, -1.56474523e-02,\n",
              "         1.85574461e-02, -2.53680758e-02, -5.39760571e-03, -5.76528022e-03,\n",
              "        -4.45538992e-03,  2.78443820e-03, -3.03373486e-02, -3.02764215e-02,\n",
              "         1.75861679e-02, -3.09678186e-02,  3.80727462e-03,  5.11152782e-02,\n",
              "         3.97228040e-02, -4.40514833e-03, -3.42219993e-02, -3.77784716e-03,\n",
              "         1.57067571e-02,  7.03005865e-03, -1.44342019e-03,  4.13854467e-03,\n",
              "        -2.75684688e-02, -9.80679132e-03, -4.66421396e-02,  1.75942406e-02,\n",
              "        -6.10011853e-02,  2.69309394e-02,  4.09507332e-03,  4.28960100e-02,\n",
              "        -1.60053801e-02,  1.43562770e-03,  5.46344966e-02,  4.83328700e-02,\n",
              "        -9.40846803e-04,  1.23326275e-02, -1.75207835e-02, -7.02852979e-02,\n",
              "        -4.64486599e-04, -6.28909245e-02, -4.27256636e-02,  6.58409111e-03,\n",
              "        -5.55396266e-02,  7.87905827e-02,  3.24920900e-02,  1.92179196e-02,\n",
              "        -3.29705290e-02,  2.06751209e-02, -1.16450163e-02,  5.52802309e-02,\n",
              "        -5.31152338e-02, -8.97162221e-03, -8.96326452e-03, -6.68816194e-02,\n",
              "        -1.20899417e-01, -7.01750629e-03,  1.75088923e-02,  6.09682910e-02,\n",
              "        -2.39840485e-02,  1.15903066e-02, -2.55030598e-02, -1.13771288e-02,\n",
              "        -9.05304588e-03,  1.55201154e-02,  2.52549928e-02,  1.33421775e-02,\n",
              "        -1.24567542e-02, -6.13298714e-02, -2.81778593e-02,  9.93344653e-03,\n",
              "         3.41389677e-03, -1.08230807e-01, -2.19137874e-02,  2.52752844e-02,\n",
              "         5.13576306e-02, -2.37672497e-02, -9.49023385e-03,  6.61825836e-02,\n",
              "         8.10342468e-03,  1.01115108e-02,  7.32137216e-03,  1.17119867e-02,\n",
              "         5.29768206e-02, -4.75646108e-02, -1.06100235e-02,  4.23893286e-03,\n",
              "         1.74064953e-02, -1.20106079e-02,  1.47316055e-02,  5.53370230e-02,\n",
              "        -8.98416713e-03,  9.07543767e-03, -2.39746012e-02, -2.80293506e-02,\n",
              "        -1.01280697e-02,  8.66215602e-02,  7.38422126e-02,  3.18471268e-02,\n",
              "         2.21159142e-02, -2.67143752e-02,  2.05574669e-02, -5.98570891e-02,\n",
              "         2.37039197e-02, -4.28460576e-02,  6.91179261e-02,  1.89455915e-02,\n",
              "        -6.02595843e-02, -1.41419088e-02,  1.81363691e-02, -7.23910006e-03,\n",
              "         1.42420838e-02,  2.99629010e-02,  1.10195680e-02,  4.93487567e-02,\n",
              "         7.58517906e-02, -2.56792717e-02, -4.69384789e-02, -3.48750465e-02,\n",
              "        -5.47715984e-02, -2.35132333e-02,  2.63286964e-03,  4.13148031e-02,\n",
              "         8.70985240e-02,  2.69971378e-02, -1.98561568e-02,  3.31961317e-03,\n",
              "        -1.00239664e-02, -1.26606198e-02, -6.50466233e-02,  1.75697338e-02,\n",
              "         1.53399892e-02,  7.30318352e-05, -6.23208769e-02, -1.89727021e-03,\n",
              "        -1.96198728e-02,  1.28127951e-02,  1.16685815e-02, -3.19496654e-02,\n",
              "        -4.62191254e-02,  4.53385934e-02, -3.22995484e-02, -1.79050379e-02,\n",
              "         4.90830571e-04,  1.15237333e-01,  4.59216498e-02,  2.20074095e-02,\n",
              "         1.13763073e-02,  2.79383827e-02, -1.49774048e-02,  3.97123164e-03,\n",
              "         2.04738155e-02, -1.16549693e-02, -1.59241073e-02,  1.37280757e-02,\n",
              "        -1.35744829e-02,  3.05473842e-02, -4.19146977e-02,  1.60336420e-02,\n",
              "         6.32567890e-03, -4.12909761e-02,  4.50802110e-02, -6.93274289e-02,\n",
              "        -3.80773805e-02, -2.18391512e-02, -1.69079173e-02,  4.38305512e-02,\n",
              "        -5.21130906e-03,  3.29445004e-02,  2.49560941e-02, -3.48059051e-02,\n",
              "         2.57497709e-02, -3.77812535e-02, -5.08823022e-02, -2.48445719e-02,\n",
              "         5.05568497e-02, -1.21046128e-02, -3.51192988e-02,  5.59645593e-02,\n",
              "         2.92655732e-02, -4.77657979e-03,  2.14637145e-02, -2.12832820e-02,\n",
              "         8.59687757e-03, -1.77827515e-02, -1.54299280e-02,  2.84762010e-02,\n",
              "         1.25795724e-02,  2.04988606e-02, -3.98621783e-02,  4.66507720e-03,\n",
              "        -6.55261753e-03, -2.37239096e-02, -1.96829513e-02, -6.27003163e-02,\n",
              "        -3.03616580e-02,  1.01835085e-02,  1.89472083e-02,  5.63647784e-02,\n",
              "         2.56459676e-02, -9.60203446e-03, -4.21064496e-02,  9.32306796e-03,\n",
              "         2.16144435e-02,  2.48387903e-02,  1.80020593e-02,  1.58099011e-02,\n",
              "        -1.98211242e-02,  2.87355222e-02,  1.38133997e-02,  3.34955081e-02,\n",
              "        -4.64937836e-03, -9.08540934e-02,  7.09811822e-02,  4.92760204e-02,\n",
              "        -4.32267264e-02,  6.35297149e-02,  2.84629641e-03, -5.56026607e-33,\n",
              "        -2.27019889e-03, -9.44199320e-03, -9.18893237e-03,  7.76494108e-03,\n",
              "        -1.24146827e-02,  8.37495364e-03, -1.44812996e-02,  1.12917237e-02,\n",
              "        -4.89831120e-02,  1.51920645e-02, -9.33300052e-03,  1.32956058e-02,\n",
              "        -4.29025432e-03, -1.49755124e-02,  1.98803879e-02,  5.73698767e-02,\n",
              "         2.02452522e-02, -3.15233916e-02, -1.41418567e-02, -6.95356950e-02,\n",
              "        -4.31506224e-02, -1.12054194e-03,  8.08841288e-02, -4.16097194e-02,\n",
              "        -3.14243250e-02, -1.30436346e-02,  2.94764619e-02, -2.46889032e-02,\n",
              "        -9.00510512e-03, -5.26661724e-02, -2.38314867e-02, -5.76303974e-02,\n",
              "         1.33741472e-03, -2.57740282e-02, -1.89406574e-02,  1.80824399e-02,\n",
              "        -2.66050678e-02, -6.02962896e-02, -8.96499120e-03,  9.36406255e-02,\n",
              "        -4.60917540e-02,  1.30051952e-02, -8.33897199e-03, -3.78029719e-02,\n",
              "        -5.57368696e-02, -2.84135062e-02,  1.71334315e-02, -9.37252957e-03,\n",
              "         2.53432039e-02,  7.84084946e-02, -2.92581506e-02, -7.90687371e-03,\n",
              "        -1.66566018e-02, -1.56725617e-03, -2.81345397e-02, -1.73142261e-03,\n",
              "        -3.17800720e-03,  3.14182490e-02,  5.21690436e-02,  4.37732507e-03,\n",
              "         4.94196154e-02,  3.97487469e-02, -2.94057117e-03,  1.70196779e-02,\n",
              "         2.95067485e-02,  3.08180302e-02,  1.14451863e-01, -1.00201052e-02,\n",
              "        -2.81518959e-02, -7.92180002e-02,  2.55969912e-02,  6.61861291e-03,\n",
              "        -1.99580546e-02,  6.21551797e-02,  8.25550035e-02,  1.45931141e-02,\n",
              "         3.30390669e-02, -1.15467599e-02, -7.37519264e-02,  8.19924101e-02,\n",
              "         8.56295228e-03, -1.32365793e-03,  7.13777822e-03,  3.46697913e-03,\n",
              "         4.23714593e-02, -3.97655256e-02, -2.58195736e-02,  4.21608053e-02,\n",
              "        -1.28439236e-02, -1.71678290e-02,  6.31786808e-02,  1.71262324e-02,\n",
              "        -1.23071959e-02,  3.01752817e-02,  3.25105190e-02,  2.41384972e-02,\n",
              "         2.20013056e-02, -7.76145188e-03,  1.81259494e-02,  1.14300949e-02,\n",
              "        -2.03211675e-03, -2.71206046e-03,  1.14166765e-02,  5.68388030e-02,\n",
              "         3.05622313e-02,  1.23424698e-02, -4.67555858e-02,  1.88257769e-02,\n",
              "         2.12610979e-02,  1.04331058e-02,  1.41413733e-02, -8.52237344e-02,\n",
              "         1.35699697e-02,  7.40424357e-03,  5.38537353e-02,  1.05875265e-02,\n",
              "         2.68732272e-02,  1.64296851e-02, -7.92072527e-03,  1.09260296e-03,\n",
              "         5.48010645e-03, -9.11562238e-03, -3.37466374e-02,  1.15384581e-03,\n",
              "        -2.37700399e-02, -5.12355678e-02,  9.99176968e-03, -5.13006747e-02,\n",
              "         2.17337199e-02,  3.86934658e-03, -5.17827645e-02, -3.85859273e-02,\n",
              "         2.90517335e-07, -4.69864272e-02,  8.52484778e-02,  6.33349270e-02,\n",
              "         3.45304497e-02,  3.11034471e-02,  5.32392832e-03,  5.16722491e-03,\n",
              "         6.06835857e-02,  4.99830069e-03, -9.58146453e-02,  4.90911193e-02,\n",
              "        -6.10224484e-03, -5.09959497e-02, -3.74443992e-03,  3.32922377e-02,\n",
              "         6.08404800e-02,  2.65137628e-02, -1.46847323e-03, -3.77331339e-02,\n",
              "         7.19136000e-02, -1.71787795e-02, -5.19171208e-02, -3.85324955e-02,\n",
              "        -3.55486460e-02, -3.50470506e-02,  1.43335958e-04, -2.00913437e-02,\n",
              "        -2.66763642e-02,  4.31328863e-02, -2.09572259e-03,  7.19452053e-02,\n",
              "        -2.86319647e-02,  1.98483691e-02,  1.21589042e-02,  2.55454239e-02,\n",
              "        -6.55112183e-03,  4.36575040e-02, -7.64086843e-04, -8.15134421e-02,\n",
              "         7.02777356e-02, -2.74353325e-02, -2.37555951e-02,  8.78110528e-03,\n",
              "        -4.17707898e-02,  6.76679704e-03,  3.45253274e-02,  5.83115108e-02,\n",
              "        -2.19925176e-02, -2.35809386e-02,  1.62354447e-02,  2.16812082e-02,\n",
              "        -1.43767744e-02,  4.32320721e-02, -1.53670292e-02, -1.05969151e-02,\n",
              "        -1.80854145e-02, -2.84397528e-02, -3.55519145e-03,  9.04110633e-03,\n",
              "         4.25117724e-02,  4.04698355e-03,  1.77025795e-02,  4.35790382e-02,\n",
              "        -3.15410681e-02,  2.05571875e-02,  2.23801658e-02, -3.66527922e-02,\n",
              "         1.96921270e-34, -2.14224663e-02,  3.15471031e-02,  1.27828950e-02,\n",
              "        -7.82638490e-02, -5.26094288e-02,  7.29017716e-04, -1.19848810e-02,\n",
              "         3.78460274e-04,  7.32830074e-03,  1.78936981e-02,  2.48527136e-02])}"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We can see that searching over embedding is very fast.\n",
        "\n",
        "But if you had 10M+ embeddings, you likely want to create an index.\n",
        "\n",
        "An index is the letters in the dictionary.\n",
        "\n",
        "For e.g., if you wanted to search \"duck\" in the dictionary, you'd start at \"d\" then find words close to \"du...\" etc.\n",
        "\n",
        "An  index helps to narrow it down.\n",
        "\n",
        "A popular indexing library for vector search is false, see: Approximate Nearest Neighbour Search. (ANN)\n",
        "\n",
        "Lers make our vector search preety"
      ],
      "metadata": {
        "id": "C7Cx-9ipdG0w"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import textwrap\n",
        "\n",
        "def print_wrapped(text, wrap_length=80):\n",
        "    wrapped_text = textwrap.fill(text, wrao_length)\n",
        "    print(wrapped_text)"
      ],
      "metadata": {
        "id": "uuVqjijNdCsO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"Query: '{query}'\")\n",
        "print(\"Results\")\n",
        "\n",
        "for score, idx in zip(top_results_dot_product[0], top_results_dot_product[1]):\n",
        "    print(f\"Score: {score:4f}\")\n",
        "    print(\"Text:\")\n",
        "    print(pages_and_chunk[idx][\"sentence_chunk\"])\n",
        "    print(f\"Page Number: {pages_and_chunk[idx]['page_number']}\")\n",
        "    print(\"/n\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FqNbxoI1dJFR",
        "outputId": "8ae99532-f0c5-46ed-da33-cd37888441cf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Query: 'What is Nearest Neighbour Search?'\n",
            "Results\n",
            "Score: 0.584829\n",
            "Text:\n",
            "In Figure 18.26, we show the decision boundary of k-nearest-neighbors classiﬁcation for k = 1 and 5 on the earthquake data set from Figure 18.15. Nonparametric methods are still subject to underﬁtting and overﬁtting, just like parametric methods. In this case 1-nearest neighbors is overﬁtting; it reacts too much to the black outlier in the upper right and the white outlier at (5.4, 3.7). The 5-nearest-neighbors decision boundary is good; higher k would underﬁt. As usual, cross-validation can be used to select the best value of k. The very word “nearest” implies a distance metric. How do we measure the distance from a query point xq to an example point xj?Typically, distances are measured with a Minkowski distance or Lp norm, deﬁned as MINKOWSKI DISTANCE Lp(xj, xq) = ( \f i |xj,i − xq,i|p)1/p . With p = 2 this is Euclidean distance and with p = 1 it is Manhattan distance. With Boolean attribute values, the number of attributes on which the two points differ is called the Ham- ming distance. Often p = 2 is used if the dimensions are measuring similar properties, such HAMMING DISTANCE as the width, height and depth of parts on a conveyor belt, and Manhattan distance is used if they are dissimilar, such as age, weight, and gender of a patient.\n",
            "Page Number: 734\n",
            "/n\n",
            "Score: 0.579002\n",
            "Text:\n",
            "Thus, the bin for point xq contains many (but not all) points that are near to xq, as well as some points that are far away. The trick of LSH is to create multiple random projections and combine them. A random projection is just a random subset of the bit-string representation. We choose ℓ different random projections and create ℓ hash tables, g1(x), . . . ,gℓ(x). We then enter all the examples into each hash table. Then when given a query point xq, we fetch the set of points in bin gk(q) for each k, and union these sets together into a set of candidate points, C. Then we compute the actual distance to xq for each of the points in C and return the k closest points. With high probability, each of the points that are near to xq will show up in at least one of the bins, and although some far-away points will show up as well, we can ignore those. With large real- world problems, such as ﬁnding the near neighbors in a data set of 13 million Web images using 512 dimensions (Torralba et al.,2008), locality-sensitive hashing needs to examine only a few thousand images out of 13 million to ﬁnd nearest neighbors; a thousand-fold speedup over exhaustive or k-d tree approaches.\n",
            "Page Number: 737\n",
            "/n\n",
            "Score: 0.574263\n",
            "Text:\n",
            "Section 18.8. Nonparametric Models 741 We can’t use hashes to solve NN (k, xq) exactly, but with a clever use of randomized algorithms, we can ﬁnd an approximate solution. First we deﬁne the approximate near- neighbors problem: given a data set of example points and a query point xq, ﬁnd, with high APPROXIMATE NEAR-NEIGHBORS probability, an example point (or points) that is near xq. To be more precise, we require that if there is a point xj that is within a radius r of xq, then with high probability the algorithm will ﬁnd a point xj′ that is within distance c r of q. If there is no point within radius r then the algorithm is allowed to report failure. The values of c and “high probability” are parameters of the algorithm. To solve approximate near neighbors, we will need a hash function g(x) that has the property that, for any two points xj and xj′, the probability that they have the same hash code is small if their distance is more than c r, and is high if their distance is less than r. For simplicity we will treat each point as a bit string. (Any features that are not Boolean can be encoded into a set of Boolean features.)The intuition we rely on is that if two points are close together in an n-dimensional space, then they will necessarily be close when projected down onto a one-dimensional space (a line). In fact, we can discretize the line into bins—hash buckets—so that, with high prob- ability, near points project down to exactly the same bin. Points that are far away from each other will tend to project down into different bins for most projections, but there will always be a few projections that coincidentally project far-apart points into the same bin.\n",
            "Page Number: 737\n",
            "/n\n",
            "Score: 0.561135\n",
            "Text:\n",
            "But nearest neighbor lookup is more complicated. As we go down the branches, splitting the examples in half, in some cases we can discard the other half of the examples. But not always. Sometimes the point we are querying for falls very close to the dividing boundary. The query point itself might be on the left hand side of the boundary, but one or more of the k nearest neighbors might actually be on the right-hand side. We have to test for this possibility by computing the distance of the query point to the dividing boundary, and then searching both sides if we can’t ﬁnd k examples on the left that are closer than this distance. Because of this problem, k-d trees are appropriate only when there are many more examples than dimensions, preferably at least 2n examples. Thus, k-d trees work well with up to 10 dimensions with thousands of examples or up to 20 dimensions with millions of examples. If we don’t have enough examples, lookup is no faster than a linear scan of the entire data set.18.8.3 Locality-sensitive hashing Hash tables have the potential to provide even faster lookup than binary trees.\n",
            "Page Number: 736\n",
            "/n\n",
            "Score: 0.555216\n",
            "Text:\n",
            "But instance-based methods are designed for large data sets, so we would like an algorithm with sublinear run time. Elementary analysis of algorithms tells us that exact table lookup is O(N) with a sequential table, O(log N) with a binary tree, and O(1) with a hash table. We will now see that binary trees and hash tables are also applicable for ﬁnding nearest neighbors.18.8.2 Finding nearest neighbors with k-d trees A balanced binary tree over data with an arbitrary number of dimensions is called a k-d tree, K-D TREE for k-dimensional tree. (In our notation, the number of dimensions is n, so they would be n-d trees. The construction of a k-d tree is similar to the construction of a one-dimensional balanced binary tree. We start with a set of examples and at the root node we split them along the ith dimension by testing whether xi ≤ m. We chose the value m to be the median of the examples along the ith dimension; thus half the examples will be in the left branch of the tree\n",
            "Page Number: 735\n",
            "/n\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Note: We could potentially improve the order of the results with a re ranking order. A model that has been trained specifically to take search results (eg. the top 25 semantic results) and rank them in order from most likely to top 1 to least likely.\n",
        "\n",
        "See here for open source reranking model\n",
        "https://huggingface.co/mixedbread-ai/mxbai-rerank-large-v1\n",
        "\n",
        "To check out results, what if we wanted to automatically surface the page of texts related to our query?"
      ],
      "metadata": {
        "id": "iWQzo0WodT6H"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import fitz\n",
        "\n",
        "#open pdf and load target\n",
        "pdf_path = \"/content/drive/MyDrive/Artificial Intelligence - A modern Approach.pdf\"\n",
        "doc = fitz.open(pdf_path)\n",
        "page = doc.load_page(734 + 22)\n",
        "\n",
        "img = page.get_pixmap(dpi=300)\n",
        "img.save('output_filename.png')\n",
        "doc.close()\n",
        "\n",
        "#Convert the pixmap to numpy array\n",
        "img_array = np.frombuffer(img.samples_mv,\n",
        "                          dtype=np.uint8).reshape((img.h, img.w, img.n))\n",
        "\n",
        "img_array\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "72b1R0NfdP2R",
        "outputId": "372e5ac9-4317-45e5-cee5-937c2829662d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[255, 255, 255],\n",
              "        [255, 255, 255],\n",
              "        [255, 255, 255],\n",
              "        ...,\n",
              "        [255, 255, 255],\n",
              "        [255, 255, 255],\n",
              "        [255, 255, 255]],\n",
              "\n",
              "       [[255, 255, 255],\n",
              "        [255, 255, 255],\n",
              "        [255, 255, 255],\n",
              "        ...,\n",
              "        [255, 255, 255],\n",
              "        [255, 255, 255],\n",
              "        [255, 255, 255]],\n",
              "\n",
              "       [[255, 255, 255],\n",
              "        [255, 255, 255],\n",
              "        [255, 255, 255],\n",
              "        ...,\n",
              "        [255, 255, 255],\n",
              "        [255, 255, 255],\n",
              "        [255, 255, 255]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[255, 255, 255],\n",
              "        [255, 255, 255],\n",
              "        [255, 255, 255],\n",
              "        ...,\n",
              "        [255, 255, 255],\n",
              "        [255, 255, 255],\n",
              "        [255, 255, 255]],\n",
              "\n",
              "       [[255, 255, 255],\n",
              "        [255, 255, 255],\n",
              "        [255, 255, 255],\n",
              "        ...,\n",
              "        [255, 255, 255],\n",
              "        [255, 255, 255],\n",
              "        [255, 255, 255]],\n",
              "\n",
              "       [[255, 255, 255],\n",
              "        [255, 255, 255],\n",
              "        [255, 255, 255],\n",
              "        ...,\n",
              "        [255, 255, 255],\n",
              "        [255, 255, 255],\n",
              "        [255, 255, 255]]], dtype=uint8)"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Display usinng matplotlib\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.figure(figsize=(13, 10))\n",
        "plt.imshow(img_array)\n",
        "plt.title(f\"Query: '{query}' | Most relevant Page:\")\n",
        "plt.axis(\"off\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 829
        },
        "id": "uCcC0M4qdKp0",
        "outputId": "095386f1-6d53-49e8-b761-2f3c9d008844"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1300x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Similarity measures: dot product and cosing similarity\n",
        "\n",
        "Two of the most common similarity measures between vectors are dot product and cosine similarity.\n",
        "\n",
        "In essence, closer vectors will have higher scores, further away vectors will have lower scores.\n",
        "\n",
        "Vector have direction (which way is it going?)  and magnitude (how long is it?)"
      ],
      "metadata": {
        "id": "n1xrI1wwd2VY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "\n",
        "def dot_product(vector1, vector2):\n",
        "    return torch.dot(vector1, vector2)\n",
        "\n",
        "def cosine_similarity(vector1, vector2):\n",
        "    dot_product = torch.dot(vector1, vector2)\n",
        "\n",
        "    #Get Euclidean/L2 norm\n",
        "    norm_vector1 = torch.sqrt(torch.sum(vector1**2))\n",
        "    norm_vector2 =  torch.sqrt(torch.sum(vector2**2))\n",
        "\n",
        "    return dot_product / (norm_vector1 * norm_vector2)\n",
        "\n",
        "# Examples vector/tensors\n",
        "vector1 = torch.tensor([1,2,3], dtype=torch.float32)\n",
        "vector2 = torch.tensor([1,2,3], dtype=torch.float32)\n",
        "vector3 = torch.tensor([4,5,6], dtype=torch.float32)\n",
        "vector4 = torch.tensor([-1, -2, -3], dtype=torch.float32)\n",
        "\n",
        "#Calculate dot product\n",
        "print(\"Dot product between vector1 and vector2 is:\", dot_product(vector1, vector2))\n",
        "print(\"Dot product between vector1 and vector2 is:\", dot_product(vector1, vector3))\n",
        "print(\"Dot product between vector1 and vector2 is:\", dot_product(vector1, vector4))\n",
        "\n",
        "# Cosine Similarity\n",
        "print(\"Cosine Similarity between vector1 and vector2 is:\", cosine_similarity(vector1, vector2))\n",
        "print(\"Cosine Similaruty between vector1 and vector2 is:\", cosine_similarity(vector1, vector3))\n",
        "print(\"Cosine Similarity between vector1 and vector2 is:\", cosine_similarity(vector1, vector4))\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3EtRnT5_duDJ",
        "outputId": "bea1768d-d973-4ee0-eed9-a5e00aba4aeb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dot product between vector1 and vector2 is: tensor(14.)\n",
            "Dot product between vector1 and vector2 is: tensor(32.)\n",
            "Dot product between vector1 and vector2 is: tensor(-14.)\n",
            "Cosine Similarity between vector1 and vector2 is: tensor(1.0000)\n",
            "Cosine Similaruty between vector1 and vector2 is: tensor(0.9746)\n",
            "Cosine Similarity between vector1 and vector2 is: tensor(-1.0000)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Functionizing our semantic search pipeline\n",
        "\n",
        "Let's put all of the steps from above for semantic search into a functionor two so we can repeat the workflow."
      ],
      "metadata": {
        "id": "z6QRpAiPd8MQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def retriece_relevant_resources(query:str, embeddings: torch.tensor, model: SentenceTransformer=embedding_model,\n",
        "                                n_resources_to_return: int=5, print_time: bool=True):\n",
        "    \"\"\"\n",
        "    Embeds a query with model and returns top k scores and indices from embeddings.\n",
        "    \"\"\"\n",
        "\n",
        "    # Embed the query\n",
        "    query_embedding = model.encode(query, convert_to_tensor=True)\n",
        "\n",
        "    # Get dot product scores on embeddings\n",
        "    start_time = timer()\n",
        "    dot_scores = util.dot_score(query_embedding, embeddings)[0]\n",
        "    end_time = timer()\n",
        "\n",
        "    if print_time:\n",
        "        print(f\"Information: Time taken to get scores on ({len(embeddings)}) embeddings: {end_time - start_time:5f} seconds.\")\n",
        "\n",
        "    scores, indices = torch.topk(input=dot_scores, k=n_resources_to_return)\n",
        "\n",
        "    return scores, indices"
      ],
      "metadata": {
        "id": "crJHMAjmd43v"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "retriece_relevant_resources(query=\"Cosine Similarity\", embeddings=embeddings)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0_GPPPsVd-vP",
        "outputId": "6ef7eb7f-1a4e-4bae-c2b8-c3353cd3d6f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Information: Time taken to get scores on (3648) embeddings: 0.000076 seconds.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor([0.3403, 0.3378, 0.3371, 0.3278, 0.3139], device='cuda:0'),\n",
              " tensor([2651, 2071, 2603, 2621, 2072], device='cuda:0'))"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def print_top_results_and_scores(query: str, embeddings: torch.tensor, pages_and_chunks: list[dict]=pages_and_chunk,\n",
        "                                 n_resources_to_return: int=5):\n",
        "    \"\"\"\n",
        "    Find relevant passages given a query and prints them out along with thier scores.\n",
        "    \"\"\"\n",
        "    scores, indices = retriece_relevant_resources(query=query, embeddings=embeddings, n_resources_to_return=n_resources_to_return)\n",
        "\n",
        "    for score, idx in zip(scores,indices):\n",
        "        print(f\"Score: {score:4f}\")\n",
        "        print(\"Text:\")\n",
        "        print(pages_and_chunk[idx][\"sentence_chunk\"])\n",
        "        print(f\"Page Number: {pages_and_chunk[idx]['page_number']}\")\n",
        "        print(\"/n\")"
      ],
      "metadata": {
        "id": "llQr8gypeBA0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "query=\"What is back propagation?\"\n",
        "retriece_relevant_resources(query=query, embeddings=embeddings)\n",
        "print_top_results_and_scores(query=query, embeddings=embeddings)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zrdMP5umeGHm",
        "outputId": "cc491007-09c2-45dd-ec9f-9f8d82846f21"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Information: Time taken to get scores on (3648) embeddings: 0.000084 seconds.\n",
            "Information: Time taken to get scores on (3648) embeddings: 0.000080 seconds.\n",
            "Score: 0.717930\n",
            "Text:\n",
            "734 Chapter 18. Learning from Examples function BACK-PROP-LEARNING(examples,network) returns a neural network inputs: examples, a set of examples, each with input vector x and output vector y network, a multilayer network with L layers, weights wi,j, activation function g local variables: Δ, a vector of errors, indexed by network node repeat for each weight wi,j in network do wi,j ← a small random number for each example (x, y) in examples do /* Propagate the inputs forward to compute the outputs */ for each node i in the input layer do ai ← xi for ℓ = 2 to L do for each node j in layer ℓ do inj ← \u0002 i wi,j ai aj ← g(inj) /* Propagate deltas backward from output layer to input layer */ for each node j in the output layer do Δ[j] ← g′(inj) × (yj − aj) for ℓ = L − 1 to 1 do for each node i in layer ℓ do Δ[i] ← g′(ini) \u0002 j wi,j Δ[j] /* Update every weight in network using deltas */ for each weight wi,j in network do wi,j ← wi,j + α × ai × Δ[j] until some stopping criterion is satisﬁed return network Figure 18.24 The back-propagation algorithm for learning in multilayer networks. Now the weight-update rule for the weights between the inputs and the hidden layer is essen- tially identical to the update rule for the output layer: wi,j ← wi,j + α × ai × Δj . The back-propagation process can be summarized as follows: • Compute the Δ values for the output units, using the observed error. •Starting with output layer, repeat the following for each layer in the network, until the earliest hidden layer is reached: – Propagate the Δ values back to the previous layer. –Update the weights between the two layers. The detailed algorithm is shown in Figure 18.24. For the mathematically inclined, we will now derive the back-propagation equations from ﬁrst principles. The derivation is quite similar to the gradient calculation for logistic\n",
            "Page Number: 730\n",
            "/n\n",
            "Score: 0.559441\n",
            "Text:\n",
            "Whereas the error y − hw at the output layer is clear, the error at the hidden layers seems mysterious because the training data do not say what value the hidden nodes should have. Fortunately, it turns out that we can back-propagate the error from the output layer to the BACK-PROPAGATION hidden layers. The back-propagation process emerges directly from a derivation of the overall error gradient. First, we will describe the process with an intuitive justiﬁcation; then, we will show the derivation. At the output layer, the weight-update rule is identical to Equation (18.8). We have multiple output units, so let Errk be the kth component of the error vector y − hw. We will also ﬁnd it convenient to deﬁne a modiﬁed error Δk = Errk × g′(ink), so that the weight- update rule becomes wj,k ← wj,k + α × aj × Δk . (18.11) To update the connections between the input units and the hidden units, we need to deﬁne a quantity analogous to the error term for output nodes. Here is where we do the error back- propagation. The idea is that hidden node j is “responsible” for some fraction of the error Δk in each of the output nodes to which it connects.\n",
            "Page Number: 729\n",
            "/n\n",
            "Score: 0.520358\n",
            "Text:\n",
            "8, pp.318–362. MIT Press. Rumelhart, D. E., Hinton, G. E., and Williams, R. J. (1986b). Learning representations by back- propagating errors. Nature, 323, 533–536. Rumelhart, D. E. and McClelland, J. L. (Eds.). (1986). Parallel Distributed Processing. MIT Press.\n",
            "Page Number: 1083\n",
            "/n\n",
            "Score: 0.512789\n",
            "Text:\n",
            "505–514. Wiley. MacKay, D. J. C. (1992). A practical Bayesian framework for back-propagation networks. Neural Computation, 4(3), 448–472. MacKay, D. J. C. (2002). Information Theory, In- ference and Learning Algorithms. Cambridge Uni- versity Press. MacKenzie, D. (2004). Mechanizing Proof.\n",
            "Page Number: 1077\n",
            "/n\n",
            "Score: 0.493052\n",
            "Text:\n",
            "This means that RECURRENT NETWORK the activation levels of the network form a dynamical system that may reach a stable state or exhibit oscillations or even chaotic behavior. Moreover, the response of the network to a given input depends on its initial state, which may depend on previous inputs. Hence, recurrent networks (unlike feed-forward networks) can support short-term memory. This makes them more interesting as models of the brain, but also more difﬁcult to understand. This section will concentrate on feed-forward networks; some pointers for further reading on recurrent networks are given at the end of the chapter. Feed-forward networks are usually arranged in layers, such that each unit receives input LAYERS only from units in the immediately preceding layer. In the next two subsections, we will look at single-layer networks, in which every unit connects directly from the network’s inputs to its outputs, and multilayer networks, which have one or more layers of hidden units that are HIDDEN UNIT not connected to the outputs of the network. So far in this chapter, we have considered only learning problems with a single output variable y, but neural networks are often used in cases where multiple outputs are appropriate. For example, if we want to train a network to add two input bits, each a 0 or a 1, we will need one output for the sum bit and one for the carry bit. Also, when the learning problem involves classiﬁcation into more than two classes—for example, when learning to categorize images of handwritten digits—it is common to use one output unit for each class.\n",
            "Page Number: 725\n",
            "/n\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Getting an LLM for local generation\n",
        "\n",
        "We want to focus on local generation.\n",
        "\n",
        "However, this process will also work with an LLM.\n",
        "\n",
        "So, What is GEnerative LLM?\n",
        "- Goes from text impit -> generate text output?\n",
        "\n",
        "Which LLM Should I Use?\n",
        "- How much hardware VRAM do you have available?"
      ],
      "metadata": {
        "id": "mfoPheFzePQk"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "HNRWHvAgeZgo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Loading an LLM Locally\n",
        "\n",
        "We can load an llm, locally using huggingface Transformers\n",
        "\n",
        "To get a model running local we're going to need a few things\n",
        "1. A quantization config (optional) - a config on what precision t load the model in (e.g., 4bit, etc)\n",
        "2. A Model ID - this will tell transformers which model.tokenizer to load\n",
        "3. A tokenizer - this turns text into numbers for the LLM (note: a tokenizer is different form and embedding)\n",
        "4. A LLm Model - this will be what we use to genereate text based on an input"
      ],
      "metadata": {
        "id": "wyXzsiaPeaTn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Note: There are many tips and tricks on oading/making LLms work faster. One of the best ones is flash_attn (Flash Attention 22). See the github for more.\n",
        "\n",
        "https://github.com/Dao-AILab/flash-attention"
      ],
      "metadata": {
        "id": "_ms__yU8fk1g"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install flash-attn --no-build-isolation"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5i3EXPhKeH5W",
        "outputId": "8ff597aa-df0b-4683-c675-18e260e09ed8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: flash-attn in /usr/local/lib/python3.10/dist-packages (2.6.3)\n",
            "Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (from flash-attn) (2.3.1+cu121)\n",
            "Requirement already satisfied: einops in /usr/local/lib/python3.10/dist-packages (from flash-attn) (0.8.0)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch->flash-attn) (3.15.4)\n",
            "Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch->flash-attn) (4.12.2)\n",
            "Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch->flash-attn) (1.13.1)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch->flash-attn) (3.3)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch->flash-attn) (3.1.4)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch->flash-attn) (2024.6.1)\n",
            "Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch->flash-attn) (12.1.105)\n",
            "Requirement already satisfied: nvidia-cuda-runtime-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch->flash-attn) (12.1.105)\n",
            "Requirement already satisfied: nvidia-cuda-cupti-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch->flash-attn) (12.1.105)\n",
            "Requirement already satisfied: nvidia-cudnn-cu12==8.9.2.26 in /usr/local/lib/python3.10/dist-packages (from torch->flash-attn) (8.9.2.26)\n",
            "Requirement already satisfied: nvidia-cublas-cu12==12.1.3.1 in /usr/local/lib/python3.10/dist-packages (from torch->flash-attn) (12.1.3.1)\n",
            "Requirement already satisfied: nvidia-cufft-cu12==11.0.2.54 in /usr/local/lib/python3.10/dist-packages (from torch->flash-attn) (11.0.2.54)\n",
            "Requirement already satisfied: nvidia-curand-cu12==10.3.2.106 in /usr/local/lib/python3.10/dist-packages (from torch->flash-attn) (10.3.2.106)\n",
            "Requirement already satisfied: nvidia-cusolver-cu12==11.4.5.107 in /usr/local/lib/python3.10/dist-packages (from torch->flash-attn) (11.4.5.107)\n",
            "Requirement already satisfied: nvidia-cusparse-cu12==12.1.0.106 in /usr/local/lib/python3.10/dist-packages (from torch->flash-attn) (12.1.0.106)\n",
            "Requirement already satisfied: nvidia-nccl-cu12==2.20.5 in /usr/local/lib/python3.10/dist-packages (from torch->flash-attn) (2.20.5)\n",
            "Requirement already satisfied: nvidia-nvtx-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch->flash-attn) (12.1.105)\n",
            "Requirement already satisfied: triton==2.3.1 in /usr/local/lib/python3.10/dist-packages (from torch->flash-attn) (2.3.1)\n",
            "Requirement already satisfied: nvidia-nvjitlink-cu12 in /usr/local/lib/python3.10/dist-packages (from nvidia-cusolver-cu12==11.4.5.107->torch->flash-attn) (12.5.82)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch->flash-attn) (2.1.5)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy->torch->flash-attn) (1.3.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "sDOejBNCkipQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!huggingface-cli login"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MMHz_hbqk6yy",
        "outputId": "073c87de-4e5f-47a8-f855-e5e89a6f5dab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "    _|    _|  _|    _|    _|_|_|    _|_|_|  _|_|_|  _|      _|    _|_|_|      _|_|_|_|    _|_|      _|_|_|  _|_|_|_|\n",
            "    _|    _|  _|    _|  _|        _|          _|    _|_|    _|  _|            _|        _|    _|  _|        _|\n",
            "    _|_|_|_|  _|    _|  _|  _|_|  _|  _|_|    _|    _|  _|  _|  _|  _|_|      _|_|_|    _|_|_|_|  _|        _|_|_|\n",
            "    _|    _|  _|    _|  _|    _|  _|    _|    _|    _|    _|_|  _|    _|      _|        _|    _|  _|        _|\n",
            "    _|    _|    _|_|      _|_|_|    _|_|_|  _|_|_|  _|      _|    _|_|_|      _|        _|    _|    _|_|_|  _|_|_|_|\n",
            "\n",
            "    To login, `huggingface_hub` requires a token generated from https://huggingface.co/settings/tokens .\n",
            "Enter your token (input will not be visible): \n",
            "Add token as git credential? (Y/n) n\n",
            "Token is valid (permission: fineGrained).\n",
            "Your token has been saved to /root/.cache/huggingface/token\n",
            "Login successful\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from transformers import AutoTokenizer, AutoModelForCausalLM\n",
        "from transformers.utils import is_flash_attn_2_available\n",
        "\n",
        "#1. Create a quantization config\n",
        "# Note: requires !pip install bitsandbytes accelerate\n",
        "\n",
        "from transformers import BitsAndBytesConfig\n",
        "\n",
        "quantization_config = BitsAndBytesConfig(\n",
        "    load_in_4bit=True,\n",
        "    bnb_4bit_compute_dtype=torch.float16,\n",
        ")\n",
        "\n",
        "# BonusL Flash Attention 2 = faster attention mechanism\n",
        "#Flash Attention 2 requires a GPU with a compute capability score of 8.0+ (Ampere, Ada Lovelave, Hopper and above)\n",
        "\n",
        "if (is_flash_attn_2_available()) and (torch.cuda.get_device_capability()[0] >= 8):\n",
        "  attn_implementation = 'flash_attention_2'\n",
        "else:\n",
        "  attn_implementation = \"sdpa\" # scaled dot product\n",
        "\n",
        "print(\"Using\", attn_implementation, \"Implementation\")\n",
        "\n",
        "# 2. Pick a model we'd like to use\n",
        "# model_id = \"google/gemma-7b-lt\"\n",
        "model_id = model_id\n",
        "\n",
        "#3 Instantiate tokenizer ( tokenizer turns text into tokens)\n",
        "tokenizer = AutoTokenizer.from_pretrained(pretrained_model_name_or_path=model_id)\n",
        "\n",
        "#4 . Instantiate the model\n",
        "\n",
        "llm_model = AutoModelForCausalLM.from_pretrained(pretrained_model_name_or_path=model_id,\n",
        "                                                 torch_dtype=torch.float16,\n",
        "                                                 quantization_config=quantization_config if use_quantization_config else None,\n",
        "                                                 low_cpu_mem_usage=False, # use as much memory as we can\n",
        "                                                 attn_implementation=attn_implementation)\n",
        "\n",
        "if not use_quantization_config:\n",
        "  llm_model.to(device=\"cuda\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 386,
          "referenced_widgets": [
            "059dcd316e5d4cc8958b51b843a8fcd0",
            "d83a1865958e46eb83a84b37e789f5fe",
            "f028c769646144fb80d7c71e306fb442",
            "bc664ef022e64f8484a4d9ae2ac116fb",
            "83014e40da9b4d46b58f86d6e56d8835",
            "fcba924675cb4b96b9b5811ce0b88787",
            "14e2af29c7b04c2da600c2627a3debab",
            "d7c9a1c744d6447c829a2d81b817d1ca",
            "d62277d97bf5454f8f94e494461ffb75",
            "b8a4cca454dc44c596617bcf65492bf7",
            "cd7a897b623140c5ace0708bfe4381cb",
            "ba08979247e74c4194654f0555da7373",
            "762ddc2b171e401f8ef9aa625a61136e",
            "660967f62ed64b5da1d7340b4ff40cfd",
            "470dfe8886644961872f484fd69675b6",
            "013ce53635264e10bbf9f5d835cefc66",
            "3c88ef10994f4008afd471ec9b92fd34",
            "f5f2dd5f1cdc490b86c19c72815ad66a",
            "b6bb2291b4434a1c83089059bccf74fc",
            "b925cd77e0594856ab58a999f9fdb275",
            "d92436c86b5f44d894356e6fc5cc4588",
            "5d9c568731bf42c68c66e2ece95849ba",
            "bdf7fa992a2c406180324c438d74f2d2",
            "1d1b0cee82b442a888d91dd22a6ec8da",
            "5d5056e917774dab99ff538aba3c9731",
            "b06ced25aa6e43029ee22741d4ff6677",
            "f08706cf0ab94e90a613e37dbe5ef2fd",
            "04d6c40782de41d5aa694ca8ecca1bfb",
            "4b9dc902ab4f4ff1bcc87cdaadc57733",
            "6a06df4f40a24d7e80c4844d0ddd0523",
            "1b341bed833540e184b0d3d06fca7a6f",
            "cc1a547966ec49d2a25d8aaace8b03b0",
            "bd4af0e922b34a0e8bb8525535f9bf4d",
            "89c384881c974c5c8353b16b04c35249",
            "37ee38ef237d452eb4e9400665125366",
            "3d2a972e51344cea9c34cd50696f96d4",
            "473000e8ef56471d866b814c90381e46",
            "25f5979c1fd74bedbc3da826e3e483a4",
            "774ee2928c4a49d3868a52958a2fad38",
            "3f87a7226aaa4a7eb892e19a5883ddf9",
            "8e1b49e020bc4a9482760a2b8be9b246",
            "f7bdddf36bf44c39b8e42c7a2368c1f8",
            "0565c2a784f54bcb99d8b16b8ed42b3f",
            "1fdeb0592df44a4e8a1a7cf9fc3598ad",
            "ae3bb452684e4b49870b36f9a3c819ab",
            "252f5c79afd44d5fb60e9aa3fe8aba6f",
            "75251b6ac5b645b2b7eb4f1c7395dd47",
            "14aaff6a41ff41fe81902ca0f0932e28",
            "50d05e395b4346b999f30999a069a1bc",
            "656392d0463f42408c883274cfe2d3db",
            "001991a12fc842159295d546da6b7d18",
            "d92a32503576448c80aa00d6207a5e63",
            "c41ea04bf87341c1b72f493279a7ff92",
            "c43f580c651f433c83f4708236e924db",
            "b0f1f8bc947c4516912f8203412e059a",
            "d9e952e65a324e0fa87176438a6f9283",
            "0d1065cdb5174dcc8dc4f5739531962a",
            "b4bebe8a8e2b4f3188357ac660545e3d",
            "2abd893e5e714605bc2239dcc87eb85a",
            "3a4ce7a239db4e9e9be50c79e6b7604b",
            "b063ee542b8540b7bc83962fe6b4e368",
            "83755f0c4f69498593fa93abf528ae25",
            "9563b5652dcd4711a9dc4fe94d057896",
            "e03585819c064cb89a953dc1fe9715a6",
            "d743ea8d0fec4b49a890f48750baf903",
            "d2e6c779bc9b4764a71828b986c22027",
            "02e36ce63ebe4d7c8d89fcea1e171030",
            "380281300b7548fd827e3b69afcb9a2a",
            "f560c06bff504a0697468209235396dc",
            "9a3f69ec70c4466f99a9675e248c1d06",
            "a2ad0733ef494160aa5d839c216935ed",
            "9328c1d887cf4b598d46cf34f7811226",
            "36c5d07fdad74660836f7bda8de93dee",
            "572184bfab2e4de8aeb06f9411ea0cea",
            "6a3e3c56c7034d4e801e62e4112d9fe0",
            "fdd9a71c2da94edeb725efb990a55c42",
            "05cf7d093fd84c6b98866f575a2c588d",
            "da04cc17348e44d280f46190a1ca4d70",
            "c5afd71461c74edbb7944ee2093816f8",
            "73b7235cfe7a4126ab5b7840c149cb4b",
            "fe24a8bf10d2462baac410e5d29d92c5",
            "d5e6bd324b0a4945a83d05e55a912ed7",
            "fbd42adb3e1f44fa94b84bdd865fec9d",
            "d798f4804b494d26a7b6f624c52f7886",
            "e0bdfb2ed6754655a8b54781d6d65c4a",
            "e4b439969a5a4c11bcff4db0d4fb9aa2",
            "bcfe53eeaaa94120bdfab112d1f841a9",
            "d41ef36378fb40acbefc4c487e214a2b",
            "c8f98a74b8bc4744a6543c21a72fb29d",
            "5e0bf1c67e8e4b4c8105f3cfba02611a",
            "8a3084acf70147749e68d05ed8f168df",
            "2d69fd52010f4a7ab625efebc167ba09",
            "a481cb9d5b8d40bcb195ff6b75c72301",
            "bb617238eecf48669cf83f0808540f9a",
            "4ca915e7ab4c457b8b9edbbd07cf314b",
            "5079093bae60420e9212fcc0a5796223",
            "36be33280b87485bae585360beeb926b",
            "7d1f991fc9cd45a38dedddec27c7c260",
            "82052945132c4575b985022a13f4d0e3",
            "7fb37bc10ad54fd5ae7fd825bb4e40b1",
            "6bc7b805a8354c7791d0ac1201b0f629",
            "5e139ae1998b40909576ce10ed788f51",
            "bf3f193c5e034695a13a7f6a3e8cc5ec",
            "0766d4b81dbc4df98f1575bd4539212c",
            "1c7a0ac02a524a3993cea9852fbb91af",
            "ca832fac31cf4a228f28af0009d80d67",
            "3070276bb8294d018cabfdd22d44a087",
            "c31d53e774734c5197a4d7d2ff84ea5b",
            "0698077e64d2476890f6400b4ebb1b8e",
            "55c10340a2af4d9aa167bec3b0a47a9f",
            "95376ed1b539409d8c0e73ba4a785ac8",
            "73d7fe9b72424b60975f4457fd46c6ca",
            "6288aa50b87a4dd7a96d08dbae4812b5",
            "4f21891e08494cdd9e11d06399cc2293",
            "16802086a67242e18ecf5707025d26a3",
            "905923ddbf00498cb23dd33079294e8e",
            "573ba084540142af8311f49afb16aeea",
            "fc062b9d6a354709a71e32833e5b282c",
            "738bb6d285a44489992c7b5c73c1a86c",
            "8102cd5977734bb8af4eb598e239288e",
            "fe67ccbe284c42ea86d22b6bfe27e1d0"
          ]
        },
        "id": "d0nDpDh8f3Bq",
        "outputId": "e409003f-a646-4142-b404-430739959168"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Using sdpa Implementation\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer_config.json:   0%|          | 0.00/34.2k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "059dcd316e5d4cc8958b51b843a8fcd0"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer.model:   0%|          | 0.00/4.24M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "ba08979247e74c4194654f0555da7373"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer.json:   0%|          | 0.00/17.5M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "bdf7fa992a2c406180324c438d74f2d2"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "special_tokens_map.json:   0%|          | 0.00/636 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "89c384881c974c5c8353b16b04c35249"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config.json:   0%|          | 0.00/627 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "ae3bb452684e4b49870b36f9a3c819ab"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "model.safetensors.index.json:   0%|          | 0.00/13.5k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "d9e952e65a324e0fa87176438a6f9283"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Downloading shards:   0%|          | 0/2 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "02e36ce63ebe4d7c8d89fcea1e171030"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "model-00001-of-00002.safetensors:   0%|          | 0.00/4.95G [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "da04cc17348e44d280f46190a1ca4d70"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "model-00002-of-00002.safetensors:   0%|          | 0.00/67.1M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "c8f98a74b8bc4744a6543c21a72fb29d"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "7fb37bc10ad54fd5ae7fd825bb4e40b1"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "generation_config.json:   0%|          | 0.00/137 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "95376ed1b539409d8c0e73ba4a785ac8"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "_ovh0PCSkH7Z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "llm_model"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JR9O3TXBm14U",
        "outputId": "9efcfabb-11d8-4a4d-9c5b-173fae5b3fc1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GemmaForCausalLM(\n",
              "  (model): GemmaModel(\n",
              "    (embed_tokens): Embedding(256000, 2048, padding_idx=0)\n",
              "    (layers): ModuleList(\n",
              "      (0-17): 18 x GemmaDecoderLayer(\n",
              "        (self_attn): GemmaSdpaAttention(\n",
              "          (q_proj): Linear(in_features=2048, out_features=2048, bias=False)\n",
              "          (k_proj): Linear(in_features=2048, out_features=256, bias=False)\n",
              "          (v_proj): Linear(in_features=2048, out_features=256, bias=False)\n",
              "          (o_proj): Linear(in_features=2048, out_features=2048, bias=False)\n",
              "          (rotary_emb): GemmaRotaryEmbedding()\n",
              "        )\n",
              "        (mlp): GemmaMLP(\n",
              "          (gate_proj): Linear(in_features=2048, out_features=16384, bias=False)\n",
              "          (up_proj): Linear(in_features=2048, out_features=16384, bias=False)\n",
              "          (down_proj): Linear(in_features=16384, out_features=2048, bias=False)\n",
              "          (act_fn): GELUActivation()\n",
              "        )\n",
              "        (input_layernorm): GemmaRMSNorm()\n",
              "        (post_attention_layernorm): GemmaRMSNorm()\n",
              "      )\n",
              "    )\n",
              "    (norm): GemmaRMSNorm()\n",
              "  )\n",
              "  (lm_head): Linear(in_features=2048, out_features=256000, bias=False)\n",
              ")"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "torch.cuda.get_device_capability(0)[0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IJrvgmuWeYh4",
        "outputId": "46013385-b240-4d76-daab-3d8d51c47775"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def get_model_num_params(model: torch.nn.Module):\n",
        "    return sum(p.numel() for p in model.parameters())"
      ],
      "metadata": {
        "id": "bFvCFz8ciVoj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "get_model_num_params(llm_model)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2oDdJZkWnzj0",
        "outputId": "5fd4c3f0-5d61-4b90-fb78-b6e4e1ebf1e1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2506172416"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def get_model_mem_size(model: torch.nn.Module):\n",
        "  # Get model parameters and buffer size\n",
        "    meme_params = sum([p.nelement() * p.element_size() for p in model.parameters()])\n",
        "    meme_buffers = sum([b.nelement() * b.element_size() for b in model.buffers()])\n",
        "\n",
        "    #Calculate model sizes\n",
        "    model_mem_bytes = meme_params + meme_buffers\n",
        "    model_mem_gb = model_mem_bytes / (1024**3)\n",
        "    model_mem_mb = model_mem_bytes / (1024**2)\n",
        "\n",
        "    return {\n",
        "        \"model_mem_bytes\": model_mem_bytes,\n",
        "        \"model_mem_gb\": round(model_mem_gb),\n",
        "        \"model_mem_mb\": round(model_mem_mb)\n",
        "    }"
      ],
      "metadata": {
        "id": "n_FY90NVn4PY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "get_model_mem_size(llm_model)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eylhjSPooXM1",
        "outputId": "a60c1741-6fb4-42a0-d173-8c5487d42fd5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'model_mem_bytes': 5079453696, 'model_mem_gb': 5, 'model_mem_mb': 4844}"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We got the size our model.\n",
        "\n",
        "This means to load 7b-it in float16 we need a minimum of 16gb of VRAM, however due to the calculation that take place in the foward pass, we actually need closet to 16GB"
      ],
      "metadata": {
        "id": "HZM9tCkVpddi"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Generate text with our LLM\n",
        "\n",
        "Let's generate text with our LOCAL LLM!\n",
        "\n",
        "*  Note: Some models have been trained/tuned to generate text with a specific template in mind.\n",
        "\n",
        "Because 'gemma-7b-it' has been trained in an instruction-tuned manner, we should follow  the instruction template for the best result."
      ],
      "metadata": {
        "id": "wXlgmDCRqI3y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        " input_text = 'Tell me about cosine similarity?'\n",
        " print(f\"Input Text: {input_text}\")\n",
        "\n",
        " #Create  a prompt template for instruction-tuned model\n",
        " dialogue_template = [\n",
        "     {\"role\": \"user\", \"content\": input_text}\n",
        " ]\n",
        "\n",
        " # Apply the chat template\n",
        " prompt = tokenizer.apply_chat_template(conversation=dialogue_template, tokenize=False, add_generation_prompt=True)\n",
        " print(f\"Prompt: {prompt}\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bu_FFfXmpCWa",
        "outputId": "709d2d79-7736-4ffc-c1ae-ab1e73a984aa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Input Text: Tell me about cosine similarity?\n",
            "Prompt: <bos><start_of_turn>user\n",
            "Tell me about cosine similarity?<end_of_turn>\n",
            "<start_of_turn>model\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%time\n",
        "\n",
        "#  # Tokenize the prompt (turn it into numbers) and send it to the GPU\n",
        "input_ids = tokenizer(prompt, return_tensors=\"pt\").to(\"cuda\")\n",
        "input_ids\n",
        "\n",
        "# Generate outputs from Local LLM\n",
        "outputs = llm_model.generate(**input_ids, max_new_tokens=256)\n",
        "print(f\"Model Output: (Tokens):\\n {outputs[0]}\\n\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zqzJV19mHz2y",
        "outputId": "0d632493-4fed-40b2-9db8-7d7c67d63350"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model Output: (Tokens):\n",
            " tensor([     2,      2,    106,   1645,    108,  27445,    682,   1105,  99080,\n",
            "         40174, 235336,    107,    108,    106,   2516,    108,  21404, 235269,\n",
            "          1517, 235303, 235256,    476,  13367,    576,  99080,  40174, 235292,\n",
            "           109,    688,  25700,    622,  40174,    688,    603,    476,   4015,\n",
            "           576,    573,  40174,   1865,   1378,  27682,    591,    483,   1378,\n",
            "        235290,  21293,    689,   4871, 235290,  21293,   1423,   3782,    846,\n",
            "          1165,    603,  11985,    731,   4998,    573,  12846,   3225,    576,\n",
            "           573,   1378,  27682,    578,  46748,    665,    731,    573,   3225,\n",
            "           576,   1024, 118376, 235265,    714,   2196,    603,    476,   1758,\n",
            "          1865,    728, 235274,    578, 235248, 235274, 235269,   1570, 235292,\n",
            "           109, 235287,   5231, 235274,    688,  14939,   4434,  40174,    108,\n",
            "        235287,   5231, 235276,    688,  14939,    793,  40174,    108, 235287,\n",
            "          5231, 235290, 235274,    688,  14939,   4434,    989, 103437,    109,\n",
            "           688,   4858, 235303, 235256,   1368,  99080,  40174,    603,   1671,\n",
            "         66058,    109, 235287,   1165,    603,  17203,   1671,    575,   5231,\n",
            "         26504,   6044,    688,    604,  13333,   1582,    685, 235292,    108,\n",
            "           141, 235287,   5231, 184568,  66058,  63251,   1423,   3782,    675,\n",
            "          3968,   5119,    108,    141, 235287,   5231,  27524,   2150,  12025,\n",
            "         66058,  18442,    573,   1758,    576,   5119,   2183,  54785,   2845,\n",
            "          2113,    108,    141, 235287,   5231,  21467,  20690,  66058,  10488,\n",
            "           573,   2184,    575,    948,   5119,    708,  30157,   3482,    611,\n",
            "          1024,   9156,    108,    141, 235287,   5231,  18551,  16398,  66058,\n",
            "         29706,  12136,    575,   1423,    109,    688,   4858, 235303, 235256,\n",
            "          1368,  99080,  40174,    603,  11985,  66058,    109,   1917,    108,\n",
            "        211102, 235298, 103437, 235278,   6593, 235274, 235269,   4301, 235284,\n",
            "        235275,    589,    591,   7591, 235298,   6088, 235278,   6593, 235274,\n",
            "        235269,   4301, 235284,   1269,   1148,    591, 101520, 235278,   6593,\n",
            "        235274, 235275,    649,  22907, 235278,   6593, 235284,   1269,    108,\n",
            "          1917,    109,    688,   4858, 235303, 235256,    476,   3890,   3287,\n",
            "         66058,    109,   1917,    108,   6593, 235274,    589,    892, 235274,\n",
            "        235269, 235248], device='cuda:0')\n",
            "\n",
            "CPU times: user 13.2 s, sys: 63.9 ms, total: 13.2 s\n",
            "Wall time: 22.4 s\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Decode the output tokens to text\n",
        "outputs_decoded = tokenizer.decode(outputs[0])\n",
        "print(f\"Model Output: (Text):\\n {outputs_decoded}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FR5CTtBPKTPL",
        "outputId": "d6ab284b-d93e-4d5d-d390-d5ef9ab67175"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model Output: (Text):\n",
            " <bos><bos><start_of_turn>user\n",
            "Tell me about cosine similarity?<end_of_turn>\n",
            "<start_of_turn>model\n",
            "Sure, here's a summary of cosine similarity:\n",
            "\n",
            "**Cosine similarity** is a measure of the similarity between two vectors (or two-dimensional or higher-dimensional data points). It is calculated by taking the dot product of the two vectors and dividing it by the product of their magnitudes. The result is a number between -1 and 1, where:\n",
            "\n",
            "* **1** indicates perfect similarity\n",
            "* **0** indicates no similarity\n",
            "* **-1** indicates perfect dissimilarity\n",
            "\n",
            "**Here's how cosine similarity is used:**\n",
            "\n",
            "* It is commonly used in **machine learning** for tasks such as:\n",
            "    * **Clustering:** grouping data points with similar features\n",
            "    * **Dimensionality reduction:** reducing the number of features while preserving important information\n",
            "    * **Rank correlation:** finding the order in which features are ranked based on their importance\n",
            "    * **Pattern recognition:** identifying patterns in data\n",
            "\n",
            "**Here's how cosine similarity is calculated:**\n",
            "\n",
            "```\n",
            "cosine_similarity(vector1, vector2) = (dot_product(vector1, vector2)) / (magnitude(vector1) * magnitude(vector2))\n",
            "```\n",
            "\n",
            "**Here's a simple example:**\n",
            "\n",
            "```\n",
            "vector1 = [1, \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gpt_questions = [\n",
        "    \"Define artificial intelligence and explain the difference between narrow AI and general AI.\",\n",
        "    \"Discuss the role of data in machine learning. Why is high-quality data important for training models?\",\n",
        "    \"What is a neural network? Describe how a simple neural network might be structured, including input, hidden, and output layers.\",\n",
        "    \"Explain the concept of overfitting in machine learning. What are some strategies to prevent overfitting?\",\n",
        "    \"Describe the use of AI in natural language processing. Give an example of a task that NLP can perform with the help of AI.\",\n",
        "    \"What is reinforcement learning? Discuss how it differs from supervised and unsupervised learning methods.\",\n",
        "    \"Explain the concept of feature scaling and why it is important in the context of training machine learning models.\",\n",
        "    \"Discuss the ethical implications of AI in decision-making processes. What are some potential risks and benefits?\",\n",
        "    \"What are convolutional neural networks (CNNs)? Explain how they are used in image recognition tasks.\",\n",
        "    \"Describe the Turing Test. What are its limitations in evaluating machine intelligence?\"\n",
        "]\n",
        "\n",
        "manual_questions = [\n",
        "    'What is AI? What is its importance?',\n",
        "    'What is Decision Tree?',\n",
        "    'What is Cosine Similarity?',\n",
        "    'What is back propagation?',\n",
        "]\n",
        "\n",
        "query_list = gpt_questions + manual_questions\n",
        "query_list\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6E7K0UajLkmF",
        "outputId": "f6d14fb1-9d3a-4e22-dc66-9575a881bde7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Define artificial intelligence and explain the difference between narrow AI and general AI.',\n",
              " 'Discuss the role of data in machine learning. Why is high-quality data important for training models?',\n",
              " 'What is a neural network? Describe how a simple neural network might be structured, including input, hidden, and output layers.',\n",
              " 'Explain the concept of overfitting in machine learning. What are some strategies to prevent overfitting?',\n",
              " 'Describe the use of AI in natural language processing. Give an example of a task that NLP can perform with the help of AI.',\n",
              " 'What is reinforcement learning? Discuss how it differs from supervised and unsupervised learning methods.',\n",
              " 'Explain the concept of feature scaling and why it is important in the context of training machine learning models.',\n",
              " 'Discuss the ethical implications of AI in decision-making processes. What are some potential risks and benefits?',\n",
              " 'What are convolutional neural networks (CNNs)? Explain how they are used in image recognition tasks.',\n",
              " 'Describe the Turing Test. What are its limitations in evaluating machine intelligence?',\n",
              " 'What is AI? What is its importance?',\n",
              " 'What is Decision Tree?',\n",
              " 'What is Cosine Similarity?',\n",
              " 'What is back propagation?']"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "query = ' How do humans and animals think and act?'\n",
        "query\n",
        "\n",
        "# Get just the cores and indices of top related results\n",
        "scores, indices = retriece_relevant_resources(query=query, embeddings=embeddings)\n",
        "scores, indices"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XZ-CIoDnP04d",
        "outputId": "0cd3dd6f-543f-482d-aa93-a78f734e808e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Information: Time taken to get scores on (3648) embeddings: 0.000082 seconds.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor([0.5153, 0.5094, 0.4895, 0.4867, 0.4739], device='cuda:0'),\n",
              " tensor([  71, 1201,   72,   44, 2801], device='cuda:0'))"
            ]
          },
          "metadata": {},
          "execution_count": 118
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Augmenting aour prompt with context items\n",
        "\n",
        "We've done retrieval.\n",
        "\n",
        "We've done generation\n",
        "\n",
        "Time to augument!!!!!!!!!!!!!!!\n",
        "\n",
        "The concept of augmenting a prompt with context items is also referred as prompt engineering.\n",
        "\n",
        "Prompt engineering is an active field of research and many new styles and techniques are being found out.\n",
        "\n",
        "However, there is a fair few techniques that work quite well.\n",
        "\n",
        "Resources:\n",
        "* https://www.promptingguide.ai/\n",
        "* https://github.com/brexhq/prompt-engineering\n",
        "* https://www.anthropic.com/news/prompt-engineering-for-business-performance\n",
        "\n",
        "We're going to use a couple of prompt techniques:\n",
        "1. Give a clear instructions.\n",
        "2. Give a few examples of input/output (e.g. given this input. I'd like this output)\n",
        "3. Give room to think (e.g. create a scratchpad/\"show your working space\"/\" let's think step by step....\"."
      ],
      "metadata": {
        "id": "ASaSdM2HQY8G"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's create a function to format a prompt wuth context items."
      ],
      "metadata": {
        "id": "7Ahmdt7WSlRA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def prompt_formatter(query:str, context_items: list[dict]) -> str:\n",
        "    \"\"\"\n",
        "    Formats a prompt with context items.\n",
        "    \"\"\"\n",
        "    context = \"- \" + \"\\n- \".join([item['sentence_chunk'] for item in context_items])\n",
        "\n",
        "    base_prompt = \"\"\"Based on the following context items, please answer the query.\n",
        "    Give yourself room to think by extracting relevant passages form the context before answering the query.\n",
        "    Don't return the thinking, only return the answer.\n",
        "    Make sure your answers are as explanatory as possible.\n",
        "    Use the following examples as reference for the ideal answer style\n",
        "    \\nExample 1:\n",
        "    Query: What is machine learning in AI?\n",
        "    Answer: Machine learning is a subset of artificial intelligence (AI) that focuses on building systems that can learn from and make decisions based on data. These systems improve their performance on tasks over time without being explicitly programmed to do so.\n",
        "    \\nExample 2:\n",
        "    Query: How does a neural network function?\n",
        "    Answer: A neural network functions by mimicking the structure and function of the human brain. It consists of layers of interconnected nodes or neurons, where each node processes input data, applies a function, and passes the output to subsequent layers. The network learns by adjusting the weights of connections based on the error of the output compared to the desired result.\n",
        "    \\nExample 3:\n",
        "    Query: What is deep learning?\n",
        "    Answer: Deep learning is a branch of machine learning that uses neural networks with three or more layers. These deep networks are capable of discovering intricate structures in large data sets by using the backpropagation algorithm to indicate how a machine should change its internal parameters that are used to compute the representation in each layer from the representation in the previous layer.\n",
        "    \\nExample 4:\n",
        "    Query: Can AI solve every problem?\n",
        "    Answer: No, AI cannot solve every problem. While AI is extremely powerful and versatile, its ability to solve problems is limited by factors such as the availability and quality of data, the appropriateness of the model used, computational resources, and the complexity of the task. Additionally, ethical, social, and practical considerations often limit the use of AI in certain domains.\n",
        "    \\nExample 5:\n",
        "    Query: What are some common applications of AI?\n",
        "    Answer: Common applications of AI include speech recognition, image recognition, autonomous driving, automated decision-making in business, personalized recommendations in retail, and predictive analytics in healthcare. AI is also used extensively in natural language processing tasks like translation, sentiment analysis, and chatbot functionality.\n",
        "    \\nNow use the following context items to answer the query:\n",
        "    {context}\n",
        "    \\nRelevant passages: <extract relevant passages from the context above>\n",
        "    \\n Please answer the user query\n",
        "    \\nUser Query: {query}\n",
        "    \\nAnswer:\n",
        "    \"\"\"\n",
        "    prompt = base_prompt.format(context=context, query=query)\n",
        "\n",
        "    #Create prompt template for incstruction-tuned model\n",
        "    dialogue_template = [\n",
        "        {\"role\": \"user\", \"content\": prompt}\n",
        "    ]\n",
        "\n",
        "    # Apply the chat template\n",
        "    prompt = tokenizer.apply_chat_template(conversation=dialogue_template, tokenize=False, add_generation_prompt=True)\n",
        "    return prompt\n",
        "\n",
        "# query = random.choice(query_list)\n",
        "print(f\"Query: {query}\")\n",
        "\n",
        "# Ger relevant resources\n",
        "scores, indices = retriece_relevant_resources(query=query, embeddings=embeddings)\n",
        "\n",
        "#Create a list of context items\n",
        "context_items = [pages_and_chunk[idx] for idx in indices]\n",
        "\n",
        "# Format the prompt\n",
        "prompt = prompt_formatter(query=query, context_items=context_items)\n",
        "print(f\"Prompt: {prompt}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LGrIQYrSQYEg",
        "outputId": "8a07455b-260b-4d76-8d75-2618abf28317"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Query:  How do humans and animals think and act?\n",
            "Information: Time taken to get scores on (3648) embeddings: 0.000085 seconds.\n",
            "Prompt: <bos><start_of_turn>user\n",
            "Based on the following context items, please answer the query.\n",
            "    Give yourself room to think by extracting relevant passages form the context before answering the query.\n",
            "    Don't return the thinking, only return the answer.\n",
            "    Make sure your answers are as explanatory as possible.\n",
            "    Use the following examples as reference for the ideal answer style\n",
            "    \n",
            "Example 1:\n",
            "    Query: What is machine learning in AI?\n",
            "    Answer: Machine learning is a subset of artificial intelligence (AI) that focuses on building systems that can learn from and make decisions based on data. These systems improve their performance on tasks over time without being explicitly programmed to do so.\n",
            "    \n",
            "Example 2:\n",
            "    Query: How does a neural network function?\n",
            "    Answer: A neural network functions by mimicking the structure and function of the human brain. It consists of layers of interconnected nodes or neurons, where each node processes input data, applies a function, and passes the output to subsequent layers. The network learns by adjusting the weights of connections based on the error of the output compared to the desired result.\n",
            "    \n",
            "Example 3:\n",
            "    Query: What is deep learning?\n",
            "    Answer: Deep learning is a branch of machine learning that uses neural networks with three or more layers. These deep networks are capable of discovering intricate structures in large data sets by using the backpropagation algorithm to indicate how a machine should change its internal parameters that are used to compute the representation in each layer from the representation in the previous layer.\n",
            "    \n",
            "Example 4:\n",
            "    Query: Can AI solve every problem?\n",
            "    Answer: No, AI cannot solve every problem. While AI is extremely powerful and versatile, its ability to solve problems is limited by factors such as the availability and quality of data, the appropriateness of the model used, computational resources, and the complexity of the task. Additionally, ethical, social, and practical considerations often limit the use of AI in certain domains.\n",
            "    \n",
            "Example 5:\n",
            "    Query: What are some common applications of AI?\n",
            "    Answer: Common applications of AI include speech recognition, image recognition, autonomous driving, automated decision-making in business, personalized recommendations in retail, and predictive analytics in healthcare. AI is also used extensively in natural language processing tasks like translation, sentiment analysis, and chatbot functionality.\n",
            "    \n",
            "Now use the following context items to answer the query:\n",
            "    - Even with a computer of virtually unlimited capacity, we still would not know how to achieve the brain’s level of intelligence.1.2.5 Psychology • How do humans and animals think and act?The origins of scientiﬁc psychology are usually traced to the work of the German physi- cist Hermann von Helmholtz (1821–1894) and his student Wilhelm Wundt (1832–1920). Helmholtz applied the scientiﬁc method to the study of human vision, and his Handbook of Physiological Optics is even now described as “the single most important treatise on the physics and physiology of human vision” (Nalwa, 1993, p.15). In 1879, Wundt opened the ﬁrst laboratory of experimental psychology, at the University of Leipzig. Wundt insisted on carefully controlled experiments in which his workers would perform a perceptual or as- sociative task while introspecting on their thought processes. The careful controls went a long way toward making psychology a science, but the subjective nature of the data made it unlikely that an experimenter would ever disconﬁrm his or her own theories. Biologists studying animal behavior, on the other hand, lacked introspective data and developed an ob- jective methodology, as described by H. S. Jennings (1906) in his inﬂuential work Behavior of the Lower Organisms. Applying this viewpoint to humans, the behaviorism movement, led BEHAVIORISM by John Watson (1878–1958), rejected any theory involving mental processes on the grounds\n",
            "- Conventions can also arise through evolutionary processes. For example, seed-eating harvester ants are social creatures that evolved from the less social wasps. Colonies of ants execute very elaborate joint plans without any centralized control—the queen’s job is to re- produce, not to do centralized planning—and with very limited computation, communica- tion, and memory capabilities in each ant (Gordon, 2000, 2007). The colony has many roles, including interior workers, patrollers, and foragers. Each ant chooses to perform a role ac- cording to the local conditions it observes. For example, foragers travel away from the nest, search for a seed, and when they ﬁnd one, bring it back immediately. Thus, the rate at which foragers return to the nest is an approximation of the availability of food today. When the rate is high, other ants abandon their current role and take on the role of scavenger. The ants appear to have a convention on the importance of roles—foraging is the most important—and ants will easily switch into the more important roles, but not into the less important. There is some learning mechanism: a colony learns to make more successful and prudent actions over the course of its decades-long life, even though individual ants live only about a year.\n",
            "- Section 1.2. The Foundations of Artiﬁcial Intelligence 13 that introspection could not provide reliable evidence. Behaviorists insisted on studying only objective measures of the percepts (or stimulus) given to an animal and its resulting actions (or response). Behaviorism discovered a lot about rats and pigeons but had less success at understanding humans. Cognitive psychology, which views the brain as an information-processing device, COGNITIVE PSYCHOLOGY can be traced back at least to the works of William James (1842–1910). Helmholtz also insisted that perception involved a form of unconscious logical inference. The cognitive viewpoint was largely eclipsed by behaviorism in the United States, but at Cambridge’s Ap- plied Psychology Unit, directed by Frederic Bartlett (1886–1969), cognitive modeling was able to ﬂourish. The Nature of Explanation, by Bartlett’s student and successor Kenneth Craik (1943), forcefully reestablished the legitimacy of such “mental” terms as beliefs and goals, arguing that they are just as scientiﬁc as, say, using pressure and temperature to talk about gases, despite their being made of molecules that have neither. Craik speciﬁed the three key steps of a knowledge-based agent: (1) the stimulus must be translated into an inter- nal representation, (2) the representation is manipulated by cognitive processes to derive new internal representations, and (3) these are in turn retranslated back into action. He clearly explained why this was a good design for an agent: If the organism carries a “small-scale model” of external reality and of its own possible actions within its head, it is able to try out various alternatives, conclude which is the best of them, react to future situations before they arise, utilize the knowledge of past events in dealing with the present and future, and in every way to react in a much fuller, safer, and more competent manner to the emergencies which face it. (\n",
            "- We need to get inside the actual workings of human minds. There are three ways to do this: through introspection—trying to catch our own thoughts as they go by; through psychological experiments—observing a person in action; and through brain imaging—observing the brain in action. Once we have a sufﬁciently precise theory of the mind, it becomes possible to express the theory as a computer program. If the program’s input–output behavior matches corresponding human behavior, that is evidence that some of the program’s mechanisms could also be operating in humans. For example, Allen Newell and Herbert Simon, who developed GPS, the “General Problem Solver” (Newell and Simon, 1961), were not content merely to have their program solve problems correctly. They were more concerned with comparing the trace of its reasoning steps to traces of human subjects solving the same problems. The interdisciplinary ﬁeld of cognitive science brings together COGNITIVE SCIENCE computer models from AI and experimental techniques from psychology to construct precise and testable theories of the human mind. Cognitive science is a fascinating ﬁeld in itself, worthy of several textbooks and at least one encyclopedia (Wilson and Keil, 1999). We will occasionally comment on similarities or differences between AI techniques and human cognition. Real cognitive science, however, is necessarily based on experimental investigation of actual humans or animals.\n",
            "- The brain is able to direct its sensors to seek relevant information and to process it to extract aspects relevant to the current situation. But, Dreyfus and Dreyfus claim, “Currently, no details of this mechanism are understood or even hypothesized in a way that could guide AI research.”In fact, the ﬁeld of active vision, underpinned by the theory of information value (Chapter 16), is concerned with exactly the problem of directing sensors, and already some robots have incorporated the theoretical results obtained. STANLEY’s 132-mile trip through the desert (page 28) was made possible in large part by an active sensing system of this kind. In sum, many of the issues Dreyfus has focused on—background commonsense knowledge, the qualiﬁcation problem, uncertainty, learning, compiled forms of decision making—are indeed important issues, and have by now been incorporated into standard intelligent agent design. In our view, this is evidence of AI’s progress, not of its impossibility. One of Dreyfus’ strongest arguments is for situated agents rather than disembodied logical inference engines. An agent whose understanding of “dog” comes only from a limited set of logical sentences such as “Dog(x) ⇒ Mammal(x)” is at a disadvantage compared to an agent that has watched dogs run, has played fetch with them, and has been licked by one. As philosopher Andy Clark (1998) says, “Biological brains are ﬁrst and foremost the control systems for biological bodies. Biological bodies move and act in rich real-world\n",
            "    \n",
            "Relevant passages: <extract relevant passages from the context above>\n",
            "    \n",
            " Please answer the user query\n",
            "    \n",
            "User Query:  How do humans and animals think and act?\n",
            "    \n",
            "Answer:<end_of_turn>\n",
            "<start_of_turn>model\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Prompt expamples:\n",
        "\n",
        "Based on the following contexts:\n",
        "- sdfdskfaf\n",
        "- sfklsjdklfasf\n",
        "- sd asdkfljdklfasd\n",
        "- jsdhfjkashdfjks\n",
        "- sjdfjkdfa\n",
        "\n",
        "Please answer the following query: What is AI and what are their benefits?\n",
        "Answer"
      ],
      "metadata": {
        "id": "FRp4Jbq5TMGS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%time\n",
        "input_ids = tokenizer(prompt, return_tensors=\"pt\").to(\"cuda\")\n",
        "\n",
        "# Generate an output of tokens\n",
        "outputs = llm_model.generate(**input_ids,\n",
        "                             temperature=0.7, # from 0 to 1 and lower the value, the more deterministic the text, the higher the value, the more creative it is\n",
        "                             do_sample=True, # whether or not to use sampling,\n",
        "                             max_new_tokens=256)\n",
        "\n",
        "# Decode the output tokens to text\n",
        "outputs_decoded = tokenizer.decode(outputs[0])\n",
        "print(\"Query:\", query)\n",
        "print(f\"Rag Answer: \\n{outputs_decoded.replace(prompt, '')}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eHSfc_w6P-PQ",
        "outputId": "6f7764ab-eb97-4220-e906-13682f818153"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Query:  How do humans and animals think and act?\n",
            "Rag Answer: \n",
            "<bos>The passage provides an overview of the study of human and animal cognition. It emphasizes the importance of introspection, psychological experiments, and brain imaging in understanding how the brain processes information. The passage also highlights the limitations of traditional cognitive psychology and how cognitive science combines insights from AI and psychology to develop more robust theories of human cognition.<eos>\n",
            "CPU times: user 3.17 s, sys: 4.8 ms, total: 3.17 s\n",
            "Wall time: 3.21 s\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Functionize out LLM answering feature\n",
        "\n",
        "Our Rag pipeline will work now from a single function\n",
        "\n",
        "E.g. you input a query and you get a generated anwer + optionally also get the souece documents (the context) where the answer was generated from.\n",
        "\n",
        "let's do it."
      ],
      "metadata": {
        "id": "vma1pAVN-ik3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def ask(query: str,\n",
        "        temperature: float=0.7,\n",
        "        max_new_tokens: int=256,\n",
        "        format_answer_text=True,\n",
        "        return_answer=True\n",
        "        ):\n",
        "  \"\"\"\n",
        "  Takes a query, finds relevant resources/context and generates an answer to the query based on the relevant resources.\n",
        "  \"\"\"\n",
        "  # Get just the scores and indices of top related results\n",
        "\n",
        "  scores, indices = retriece_relevant_resources(query=query, embeddings=embeddings)\n",
        "\n",
        "  # Create a list of context items\n",
        "  context_items = [pages_and_chunk[idx] for idx in indices]\n",
        "\n",
        "  # Add score to the context\n",
        "  for i, item in enumerate(context_items):\n",
        "    item['score'] = scores[i].cpu()\n",
        "\n",
        "  #AUGUMENTATION\n",
        "  # Format the prompt\n",
        "  prompt = prompt_formatter(query=query, context_items=context_items)\n",
        "\n",
        "  # Generate an output of tokens\n",
        "  # Tokenize\n",
        "  input_ids = tokenizer(prompt, return_tensors=\"pt\").to(\"cuda\")\n",
        "\n",
        "  #Generate an outputs of tokens\n",
        "  outputs = llm_model.generate(**input_ids,\n",
        "                               temperature=temperature,\n",
        "                               do_sample=True,\n",
        "                               max_new_tokens=max_new_tokens)\n",
        "\n",
        "  # Format the answer\n",
        "  if format_answer_text:\n",
        "    # Replace prompt and special tokens\n",
        "    outputs_text = output_text.replace(prompt, \"\").replace(\"<bos>\", \"\").replace(\"<eos>\", \"\")\n",
        "\n",
        "  #Only return the answer without context items\n",
        "  if return_answer:\n",
        "    return outputs_text\n",
        "\n",
        "\n",
        "  return outputs_text, context_items\n"
      ],
      "metadata": {
        "id": "_-LqqBcZU5yf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "query = random.choice(query_list)\n",
        "print(f\"Query: {query}\")\n",
        "ask(query=query, temperature=0.2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 176
        },
        "id": "TAiNOLnaCZDu",
        "outputId": "5aba1006-1966-451d-c1a9-57b86e816725"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'random' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-2-7068c09aaf0c>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mquery\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mchoice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mquery_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Query: {query}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mask\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mquery\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mquery\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'random' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "6gQ6bEdyCxXR"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}